

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Sep 10 10:48:22 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0016FE                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _duty4
    84  0016FE  0010               	dw	16
    85  001700  0020               	dw	32
    86                           
    87                           ;initializer for _duty3
    88  001702  0010               	dw	16
    89  001704  0020               	dw	32
    90                           
    91                           ;initializer for _duty2
    92  001706  0010               	dw	16
    93  001708  0020               	dw	32
    94                           
    95                           ;initializer for _duty1
    96  00170A  0010               	dw	16
    97  00170C  0020               	dw	32
    98                           
    99                           ;initializer for _pwm
   100  00170E  0010               	dw	16
   101                           
   102                           ;initializer for isr_Timer0@cont2
   103  001710  08                 	db	8
   104                           
   105                           ;initializer for isr_Timer0@cont
   106  001711  3F                 	db	63
   107                           
   108                           ;initializer for _estado
   109  001712  01                 	db	1
   110                           
   111                           ;initializer for _retsak
   112  001713  01                 	db	1
   113                           
   114                           ;initializer for _selecao
   115  001714  04                 	db	4
   116                           
   117                           ;initializer for _contDeadTime
   118  001715  01                 	db	1
   119  0000                     _TMR0	set	4054
   120  0000                     _PORTAbits	set	3968
   121  0000                     _INTCONbits	set	4082
   122  0000                     _TRISA	set	3986
   123  0000                     _TRISB	set	3987
   124  0000                     _INTCON	set	4082
   125  0000                     _T0CON	set	4053
   126  0000                     _PORTBbits	set	3969
   127  0000                     _PORTDbits	set	3971
   128  0000                     _TRISDbits	set	3989
   129  0000                     _TRISBbits	set	3987
   130  0000                     _ADCON1	set	4033
   131  0000                     _INTCON2bits	set	4081
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _PORTEbits	set	3972
   135  0000                     _PORTD	set	3971
   136  0000                     _PIR1bits	set	3998
   137  0000                     _ADRESL	set	4035
   138  0000                     _ADRESH	set	4036
   139  0000                     _ADCON2bits	set	4032
   140  0000                     _ADCON1bits	set	4033
   141  0000                     _ADCON0bits	set	4034
   142                           
   143                           	psect	smallconst
   144  000800                     __psmallconst:
   145                           	opt callstack 0
   146  000800  00                 	db	0
   147  000801                     STR_1:
   148  000801  0C                 	db	12
   149  000802  42                 	db	66	;'B'
   150  000803  72                 	db	114	;'r'
   151  000804  61                 	db	97	;'a'
   152  000805  63                 	db	99	;'c'
   153  000806  6F                 	db	111	;'o'
   154  000807  20                 	db	32
   155  000808  52                 	db	82	;'R'
   156  000809  6F                 	db	111	;'o'
   157  00080A  62                 	db	98	;'b'
   158  00080B  6F                 	db	111	;'o'
   159  00080C  74                 	db	116	;'t'
   160  00080D  69                 	db	105	;'i'
   161  00080E  63                 	db	99	;'c'
   162  00080F  6F                 	db	111	;'o'
   163  000810  3A                 	db	58	;':'
   164  000811  0A                 	db	10
   165  000812  2A                 	db	42
   166  000813  2D                 	db	45
   167  000814  54                 	db	84	;'T'
   168  000815  65                 	db	101	;'e'
   169  000816  73                 	db	115	;'s'
   170  000817  74                 	db	116	;'t'
   171  000818  61                 	db	97	;'a'
   172  000819  72                 	db	114	;'r'
   173  00081A  20                 	db	32
   174  00081B  23                 	db	35
   175  00081C  2D                 	db	45
   176  00081D  43                 	db	67	;'C'
   177  00081E  6F                 	db	111	;'o'
   178  00081F  6E                 	db	110	;'n'
   179  000820  66                 	db	102	;'f'
   180  000821  00                 	db	0
   181  000822                     STR_2:
   182  000822  0C                 	db	12
   183  000823  45                 	db	69	;'E'
   184  000824  73                 	db	115	;'s'
   185  000825  63                 	db	99	;'c'
   186  000826  6F                 	db	111	;'o'
   187  000827  6C                 	db	108	;'l'
   188  000828  68                 	db	104	;'h'
   189  000829  61                 	db	97	;'a'
   190  00082A  20                 	db	32
   191  00082B  6F                 	db	111	;'o'
   192  00082C  20                 	db	32
   193  00082D  53                 	db	83	;'S'
   194  00082E  65                 	db	101	;'e'
   195  00082F  72                 	db	114	;'r'
   196  000830  76                 	db	118	;'v'
   197  000831  6F                 	db	111	;'o'
   198  000832  3A                 	db	58	;':'
   199  000833  0A                 	db	10
   200  000834  31                 	db	49	;'1'
   201  000835  20                 	db	32
   202  000836  32                 	db	50	;'2'
   203  000837  20                 	db	32
   204  000838  33                 	db	51	;'3'
   205  000839  20                 	db	32
   206  00083A  34                 	db	52	;'4'
   207  00083B  20                 	db	32
   208  00083C  2A                 	db	42
   209  00083D  2D                 	db	45
   210  00083E  45                 	db	69	;'E'
   211  00083F  53                 	db	83	;'S'
   212  000840  43                 	db	67	;'C'
   213  000841  00                 	db	0
   214  000842                     STR_7:
   215  000842  0C                 	db	12
   216  000843  42                 	db	66	;'B'
   217  000844  72                 	db	114	;'r'
   218  000845  61                 	db	97	;'a'
   219  000846  63                 	db	99	;'c'
   220  000847  6F                 	db	111	;'o'
   221  000848  20                 	db	32
   222  000849  52                 	db	82	;'R'
   223  00084A  6F                 	db	111	;'o'
   224  00084B  62                 	db	98	;'b'
   225  00084C  6F                 	db	111	;'o'
   226  00084D  74                 	db	116	;'t'
   227  00084E  69                 	db	105	;'i'
   228  00084F  63                 	db	99	;'c'
   229  000850  6F                 	db	111	;'o'
   230  000851  0A                 	db	10
   231  000852  48                 	db	72	;'H'
   232  000853  65                 	db	101	;'e'
   233  000854  6E                 	db	110	;'n'
   234  000855  72                 	db	114	;'r'
   235  000856  69                 	db	105	;'i'
   236  000857  71                 	db	113	;'q'
   237  000858  75                 	db	117	;'u'
   238  000859  65                 	db	101	;'e'
   239  00085A  20                 	db	32
   240  00085B  4E                 	db	78	;'N'
   241  00085C  2E                 	db	46
   242  00085D  20                 	db	32
   243  00085E  52                 	db	82	;'R'
   244  00085F  2E                 	db	46
   245  000860  00                 	db	0
   246  000861                     STR_4:
   247  000861  0C                 	db	12
   248  000862  53                 	db	83	;'S'
   249  000863  61                 	db	97	;'a'
   250  000864  6C                 	db	108	;'l'
   251  000865  76                 	db	118	;'v'
   252  000866  61                 	db	97	;'a'
   253  000867  72                 	db	114	;'r'
   254  000868  20                 	db	32
   255  000869  50                 	db	80	;'P'
   256  00086A  6F                 	db	111	;'o'
   257  00086B  73                 	db	115	;'s'
   258  00086C  69                 	db	105	;'i'
   259  00086D  2D                 	db	45
   260  00086E  31                 	db	49	;'1'
   261  00086F  20                 	db	32
   262  000870  53                 	db	83	;'S'
   263  000871  0A                 	db	10
   264  000872  2A                 	db	42
   265  000873  2D                 	db	45
   266  000874  45                 	db	69	;'E'
   267  000875  53                 	db	83	;'S'
   268  000876  43                 	db	67	;'C'
   269  000877  20                 	db	32
   270  000878  23                 	db	35
   271  000879  2D                 	db	45
   272  00087A  45                 	db	69	;'E'
   273  00087B  4E                 	db	78	;'N'
   274  00087C  54                 	db	84	;'T'
   275  00087D  45                 	db	69	;'E'
   276  00087E  52                 	db	82	;'R'
   277  00087F  00                 	db	0
   278  000880                     STR_5:
   279  000880  0C                 	db	12
   280  000881  53                 	db	83	;'S'
   281  000882  61                 	db	97	;'a'
   282  000883  6C                 	db	108	;'l'
   283  000884  76                 	db	118	;'v'
   284  000885  61                 	db	97	;'a'
   285  000886  72                 	db	114	;'r'
   286  000887  20                 	db	32
   287  000888  50                 	db	80	;'P'
   288  000889  6F                 	db	111	;'o'
   289  00088A  73                 	db	115	;'s'
   290  00088B  69                 	db	105	;'i'
   291  00088C  2D                 	db	45
   292  00088D  32                 	db	50	;'2'
   293  00088E  20                 	db	32
   294  00088F  53                 	db	83	;'S'
   295  000890  0A                 	db	10
   296  000891  2A                 	db	42
   297  000892  2D                 	db	45
   298  000893  45                 	db	69	;'E'
   299  000894  53                 	db	83	;'S'
   300  000895  43                 	db	67	;'C'
   301  000896  20                 	db	32
   302  000897  23                 	db	35
   303  000898  2D                 	db	45
   304  000899  45                 	db	69	;'E'
   305  00089A  4E                 	db	78	;'N'
   306  00089B  54                 	db	84	;'T'
   307  00089C  45                 	db	69	;'E'
   308  00089D  52                 	db	82	;'R'
   309  00089E  00                 	db	0
   310  00089F                     STR_6:
   311  00089F  0C                 	db	12
   312  0008A0  50                 	db	80	;'P'
   313  0008A1  72                 	db	114	;'r'
   314  0008A2  65                 	db	101	;'e'
   315  0008A3  73                 	db	115	;'s'
   316  0008A4  73                 	db	115	;'s'
   317  0008A5  69                 	db	105	;'i'
   318  0008A6  6F                 	db	111	;'o'
   319  0008A7  6E                 	db	110	;'n'
   320  0008A8  65                 	db	101	;'e'
   321  0008A9  20                 	db	32
   322  0008AA  2A                 	db	42
   323  0008AB  2D                 	db	45
   324  0008AC  45                 	db	69	;'E'
   325  0008AD  53                 	db	83	;'S'
   326  0008AE  43                 	db	67	;'C'
   327  0008AF  0A                 	db	10
   328  0008B0  53                 	db	83	;'S'
   329  0008B1  3A                 	db	58	;':'
   330  0008B2  20                 	db	32
   331  0008B3  20                 	db	32
   332  0008B4  20                 	db	32
   333  0008B5  20                 	db	32
   334  0008B6  70                 	db	112	;'p'
   335  0008B7  77                 	db	119	;'w'
   336  0008B8  6D                 	db	109	;'m'
   337  0008B9  3A                 	db	58	;':'
   338  0008BA  00                 	db	0
   339  0008BB                     STR_3:
   340  0008BB  0C                 	db	12
   341  0008BC  45                 	db	69	;'E'
   342  0008BD  73                 	db	115	;'s'
   343  0008BE  63                 	db	99	;'c'
   344  0008BF  6F                 	db	111	;'o'
   345  0008C0  6C                 	db	108	;'l'
   346  0008C1  68                 	db	104	;'h'
   347  0008C2  61                 	db	97	;'a'
   348  0008C3  20                 	db	32
   349  0008C4  4D                 	db	77	;'M'
   350  0008C5  6F                 	db	111	;'o'
   351  0008C6  76                 	db	118	;'v'
   352  0008C7  2D                 	db	45
   353  0008C8  53                 	db	83	;'S'
   354  0008C9  0A                 	db	10
   355  0008CA  31                 	db	49	;'1'
   356  0008CB  2D                 	db	45
   357  0008CC  50                 	db	80	;'P'
   358  0008CD  31                 	db	49	;'1'
   359  0008CE  20                 	db	32
   360  0008CF  32                 	db	50	;'2'
   361  0008D0  2D                 	db	45
   362  0008D1  50                 	db	80	;'P'
   363  0008D2  32                 	db	50	;'2'
   364  0008D3  00                 	db	0
   365                           
   366                           ; #config settings
   367  0008D4  00                 	db	0	; dummy byte at the end
   368  0000                     
   369                           	psect	cinit
   370  001596                     __pcinit:
   371                           	opt callstack 0
   372  001596                     start_initialization:
   373                           	opt callstack 0
   374  001596                     __initialization:
   375                           	opt callstack 0
   376                           
   377                           ; Initialize objects allocated to COMRAM (24 bytes)
   378                           ; load TBLPTR registers with __pidataCOMRAM
   379  001596  0EFE               	movlw	low __pidataCOMRAM
   380  001598  6EF6               	movwf	tblptrl,c
   381  00159A  0E16               	movlw	high __pidataCOMRAM
   382  00159C  6EF7               	movwf	tblptrh,c
   383  00159E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   384  0015A0  6EF8               	movwf	tblptru,c
   385  0015A2  EE00  F001         	lfsr	0,__pdataCOMRAM
   386  0015A6  EE10 F018          	lfsr	1,24
   387  0015AA                     copy_data0:
   388  0015AA  0009               	tblrd		*+
   389  0015AC  CFF5 FFEE          	movff	tablat,postinc0
   390  0015B0  50E5               	movf	postdec1,w,c
   391  0015B2  50E1               	movf	fsr1l,w,c
   392  0015B4  E1FA               	bnz	copy_data0
   393                           
   394                           ; Clear objects allocated to BITCOMRAM (3 bytes)
   395  0015B6  6A30               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
   396  0015B8  6A2F               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   397  0015BA  6A2E               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   398                           
   399                           ; Clear objects allocated to COMRAM (15 bytes)
   400  0015BC  EE00  F031         	lfsr	0,__pbssCOMRAM
   401  0015C0  0E0F               	movlw	15
   402  0015C2                     clear_0:
   403  0015C2  6AEE               	clrf	postinc0,c
   404  0015C4  06E8               	decf	wreg,f,c
   405  0015C6  E1FD               	bnz	clear_0
   406  0015C8                     end_of_initialization:
   407                           	opt callstack 0
   408  0015C8                     __end_of__initialization:
   409                           	opt callstack 0
   410  0015C8  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   411  0015CA  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   412  0015CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   413  0015CE  6EF8               	movwf	tblptru,c
   414  0015D0  0100               	movlb	0
   415  0015D2  EFAA  F00A         	goto	_main	;jump to C main() function
   416                           
   417                           	psect	bitbssCOMRAM
   418  000170                     __pbitbssCOMRAM:
   419                           	opt callstack 0
   420  000170                     _flag:
   421                           	opt callstack 0
   422  000170                     	ds	1
   423  000171                     _flagDeadTime:
   424                           	opt callstack 0
   425  000171                     	ds	1
   426  000172                     _btal4c4:
   427                           	opt callstack 0
   428  000172                     	ds	1
   429  000173                     _btal4c3:
   430                           	opt callstack 0
   431  000173                     	ds	1
   432  000174                     _btal4c2:
   433                           	opt callstack 0
   434  000174                     	ds	1
   435  000175                     _btal4c1:
   436                           	opt callstack 0
   437  000175                     	ds	1
   438  000176                     _btal3c4:
   439                           	opt callstack 0
   440  000176                     	ds	1
   441  000177                     _btal3c3:
   442                           	opt callstack 0
   443  000177                     	ds	1
   444  000178                     _btal3c2:
   445                           	opt callstack 0
   446  000178                     	ds	1
   447  000179                     _btal3c1:
   448                           	opt callstack 0
   449  000179                     	ds	1
   450  00017A                     _btal2c4:
   451                           	opt callstack 0
   452  00017A                     	ds	1
   453  00017B                     _btal2c3:
   454                           	opt callstack 0
   455  00017B                     	ds	1
   456  00017C                     _btal2c2:
   457                           	opt callstack 0
   458  00017C                     	ds	1
   459  00017D                     _btal2c1:
   460                           	opt callstack 0
   461  00017D                     	ds	1
   462  00017E                     _btal1c4:
   463                           	opt callstack 0
   464  00017E                     	ds	1
   465  00017F                     _btal1c3:
   466                           	opt callstack 0
   467  00017F                     	ds	1
   468  000180                     _btal1c2:
   469                           	opt callstack 0
   470  000180                     	ds	1
   471  000181                     _btal1c1:
   472                           	opt callstack 0
   473  000181                     	ds	1
   474                           
   475                           	psect	bssCOMRAM
   476  000031                     __pbssCOMRAM:
   477                           	opt callstack 0
   478  000031                     _flamis:
   479                           	opt callstack 0
   480  000031                     	ds	2
   481  000033                     adc_read@result:
   482                           	opt callstack 0
   483  000033                     	ds	2
   484  000035                     _adcval:
   485                           	opt callstack 0
   486  000035                     	ds	2
   487  000037                     _tecla:
   488                           	opt callstack 0
   489  000037                     	ds	1
   490  000038                     lcd_display5@un:
   491                           	opt callstack 0
   492  000038                     	ds	1
   493  000039                     lcd_display5@dez:
   494                           	opt callstack 0
   495  000039                     	ds	1
   496  00003A                     lcd_display5@cent:
   497                           	opt callstack 0
   498  00003A                     	ds	1
   499  00003B                     lcd_display5@unmil:
   500                           	opt callstack 0
   501  00003B                     	ds	1
   502  00003C                     lcd_display5@dezmil:
   503                           	opt callstack 0
   504  00003C                     	ds	1
   505  00003D                     lcd_display3@un:
   506                           	opt callstack 0
   507  00003D                     	ds	1
   508  00003E                     lcd_display3@dez:
   509                           	opt callstack 0
   510  00003E                     	ds	1
   511  00003F                     lcd_display3@cent:
   512                           	opt callstack 0
   513  00003F                     	ds	1
   514                           
   515                           	psect	dataCOMRAM
   516  000001                     __pdataCOMRAM:
   517                           	opt callstack 0
   518  000001                     _duty4:
   519                           	opt callstack 0
   520  000001                     	ds	4
   521  000005                     _duty3:
   522                           	opt callstack 0
   523  000005                     	ds	4
   524  000009                     _duty2:
   525                           	opt callstack 0
   526  000009                     	ds	4
   527  00000D                     _duty1:
   528                           	opt callstack 0
   529  00000D                     	ds	4
   530  000011                     _pwm:
   531                           	opt callstack 0
   532  000011                     	ds	2
   533  000013                     isr_Timer0@cont2:
   534                           	opt callstack 0
   535  000013                     	ds	1
   536  000014                     isr_Timer0@cont:
   537                           	opt callstack 0
   538  000014                     	ds	1
   539  000015                     _estado:
   540                           	opt callstack 0
   541  000015                     	ds	1
   542  000016                     _retsak:
   543                           	opt callstack 0
   544  000016                     	ds	1
   545  000017                     _selecao:
   546                           	opt callstack 0
   547  000017                     	ds	1
   548  000018                     _contDeadTime:
   549                           	opt callstack 0
   550  000018                     	ds	1
   551                           
   552                           	psect	cstackCOMRAM
   553  000019                     __pcstackCOMRAM:
   554                           	opt callstack 0
   555  000019                     ??_isr_Timer0:
   556  000019                     
   557                           ; 1 bytes @ 0x0
   558  000019                     	ds	2
   559  00001B                     ??_keyboardScan2:
   560  00001B                     ??_selecaoServos:
   561  00001B                     ?_adc_read:
   562                           	opt callstack 0
   563  00001B                     lcd_writeNibble@ch:
   564                           	opt callstack 0
   565  00001B                     set_duty@val:
   566                           	opt callstack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  00001B                     	ds	1
   570  00001C                     lcd_write4@_rs:
   571                           	opt callstack 0
   572                           
   573                           ; 1 bytes @ 0x3
   574  00001C                     	ds	1
   575  00001D                     ?_isr_AD:
   576                           	opt callstack 0
   577  00001D                     lcd_write4@ch:
   578                           	opt callstack 0
   579  00001D                     selecaoServos@p:
   580                           	opt callstack 0
   581                           
   582                           ; 1 bytes @ 0x4
   583  00001D                     	ds	1
   584  00001E                     ??_init_lcd:
   585  00001E                     lcd_display3@val:
   586                           	opt callstack 0
   587  00001E                     lcd_string@ch:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x5
   591  00001E                     	ds	1
   592  00001F                     ?___awdiv:
   593                           	opt callstack 0
   594  00001F                     ___awdiv@dividend:
   595                           	opt callstack 0
   596                           
   597                           ; 2 bytes @ 0x6
   598  00001F                     	ds	1
   599  000020                     ??_lcd_string:
   600                           
   601                           ; 1 bytes @ 0x7
   602  000020                     	ds	1
   603  000021                     ___awdiv@divisor:
   604                           	opt callstack 0
   605                           
   606                           ; 2 bytes @ 0x8
   607  000021                     	ds	1
   608  000022                     ??_maqTeste:
   609                           
   610                           ; 1 bytes @ 0x9
   611  000022                     	ds	1
   612  000023                     ___awdiv@counter:
   613                           	opt callstack 0
   614                           
   615                           ; 1 bytes @ 0xA
   616  000023                     	ds	1
   617  000024                     maqTeste@val:
   618                           	opt callstack 0
   619  000024                     ___awdiv@sign:
   620                           	opt callstack 0
   621                           
   622                           ; 1 bytes @ 0xB
   623  000024                     	ds	1
   624  000025                     ___awdiv@quotient:
   625                           	opt callstack 0
   626                           
   627                           ; 2 bytes @ 0xC
   628  000025                     	ds	2
   629  000027                     ??_maqEstados:
   630                           
   631                           ; 1 bytes @ 0xE
   632  000027                     	ds	2
   633  000029                     maqEstados@adc:
   634                           	opt callstack 0
   635                           
   636                           ; 2 bytes @ 0x10
   637  000029                     	ds	2
   638  00002B                     maqEstados@val:
   639                           	opt callstack 0
   640                           
   641                           ; 1 bytes @ 0x12
   642  00002B                     	ds	1
   643  00002C                     ??_main:
   644                           
   645                           ; 1 bytes @ 0x13
   646  00002C                     	ds	2
   647                           
   648 ;;
   649 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   650 ;;
   651 ;; *************** function _main *****************
   652 ;; Defined at:
   653 ;;		line 368 in file "pwm.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0       0       0
   669 ;;      Temps:          2       0       0       0       0       0       0       0       0
   670 ;;      Totals:         2       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels required when called:    9
   673 ;; This function calls:
   674 ;;		_init
   675 ;;		_lcd_string
   676 ;;		_lcd_write4
   677 ;;		_maqEstados
   678 ;;		_tela0
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text0
   685  001554                     __ptext0:
   686                           	opt callstack 0
   687  001554                     _main:
   688                           	opt callstack 22
   689  001554                     
   690                           ;pwm.c: 369:      init();
   691  001554  EC48  F00B         	call	_init	;wreg free
   692  001558                     
   693                           ;pwm.c: 370:      lcd_string("\fBraco Robotico\nHenrique N. R.");
   694  001558  0E42               	movlw	low STR_7
   695  00155A  6E1E               	movwf	lcd_string@ch^0,c
   696  00155C  0E08               	movlw	high STR_7
   697  00155E  6E1F               	movwf	(lcd_string@ch+1)^0,c
   698  001560  ECEB  F009         	call	_lcd_string	;wreg free
   699  001564                     
   700                           ;pwm.c: 371:      lcd_write4(0b00001100,0);
   701  001564  0E00               	movlw	0
   702  001566  6E1C               	movwf	lcd_write4@_rs^0,c
   703  001568  0E0C               	movlw	12
   704  00156A  ECEB  F00A         	call	_lcd_write4
   705  00156E                     
   706                           ;pwm.c: 372:      _delay((unsigned long)((4000)*(8000000/4000.0)));
   707  00156E  0E29               	movlw	41
   708  001570  6E2D               	movwf	(??_main+1)^0,c
   709  001572  0E96               	movlw	150
   710  001574  6E2C               	movwf	??_main^0,c
   711  001576  0E7F               	movlw	127
   712  001578                     u1317:
   713  001578  2EE8               	decfsz	wreg,f,c
   714  00157A  D7FE               	bra	u1317
   715  00157C  2E2C               	decfsz	??_main^0,f,c
   716  00157E  D7FC               	bra	u1317
   717  001580  2E2D               	decfsz	(??_main+1)^0,f,c
   718  001582  D7FA               	bra	u1317
   719  001584  F000               	nop	
   720  001586                     
   721                           ;pwm.c: 373:      tela0();
   722  001586  EC97  F00B         	call	_tela0	;wreg free
   723  00158A                     l2288:
   724                           
   725                           ;pwm.c: 376:      {;pwm.c: 377:         maqEstados();
   726  00158A  EC2E  F006         	call	_maqEstados	;wreg free
   727  00158E  EFC5  F00A         	goto	l2288
   728  001592  EF07  F000         	goto	start
   729  001596                     __end_of_main:
   730                           	opt callstack 0
   731                           
   732 ;; *************** function _maqEstados *****************
   733 ;; Defined at:
   734 ;;		line 151 in file "pwm.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  adc             2   16[COMRAM] int 
   739 ;;  val             1   18[COMRAM] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   749 ;;      Params:         0       0       0       0       0       0       0       0       0
   750 ;;      Locals:         3       0       0       0       0       0       0       0       0
   751 ;;      Temps:          2       0       0       0       0       0       0       0       0
   752 ;;      Totals:         5       0       0       0       0       0       0       0       0
   753 ;;Total ram usage:        5 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    8
   756 ;; This function calls:
   757 ;;		___awdiv
   758 ;;		_isr_AD
   759 ;;		_keyboardScan3
   760 ;;		_maqTeste
   761 ;;		_selecaoServos
   762 ;;		_set_duty
   763 ;;		_tela0
   764 ;;		_tela1
   765 ;;		_tela2
   766 ;;		_tela31
   767 ;;		_tela32
   768 ;;		_tela4
   769 ;; This function is called by:
   770 ;;		_main
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text1
   775  000C5C                     __ptext1:
   776                           	opt callstack 0
   777  000C5C                     _maqEstados:
   778                           	opt callstack 22
   779  000C5C                     
   780                           ;pwm.c: 153:     unsigned char val = 0;
   781  000C5C  0E00               	movlw	0
   782  000C5E  6E2B               	movwf	maqEstados@val^0,c
   783                           
   784                           ;pwm.c: 154:     switch (estado) {
   785  000C60  EF34  F007         	goto	l2226
   786  000C64                     l2104:
   787                           
   788                           ;pwm.c: 156:             val = keyboardScan3();
   789  000C64  EC65  F00B         	call	_keyboardScan3	;wreg free
   790  000C68  6E2B               	movwf	maqEstados@val^0,c
   791  000C6A                     
   792                           ;pwm.c: 157:             if(val == '#'){
   793  000C6A  0E23               	movlw	35
   794  000C6C  182B               	xorwf	maqEstados@val^0,w,c
   795  000C6E  A4D8               	btfss	status,2,c
   796  000C70  EF3C  F006         	goto	u1131
   797  000C74  EF3E  F006         	goto	u1130
   798  000C78                     u1131:
   799  000C78  EF42  F006         	goto	l2112
   800  000C7C                     u1130:
   801  000C7C                     
   802                           ;pwm.c: 158:                 estado = 2;
   803  000C7C  0E02               	movlw	2
   804  000C7E  6E15               	movwf	_estado^0,c
   805  000C80                     
   806                           ;pwm.c: 159:                 tela1();
   807  000C80  EC8B  F00B         	call	_tela1	;wreg free
   808  000C84                     l2112:
   809                           
   810                           ;pwm.c: 161:             if(val == '*'){
   811  000C84  0E2A               	movlw	42
   812  000C86  182B               	xorwf	maqEstados@val^0,w,c
   813  000C88  A4D8               	btfss	status,2,c
   814  000C8A  EF49  F006         	goto	u1141
   815  000C8E  EF4B  F006         	goto	u1140
   816  000C92                     u1141:
   817  000C92  EF59  F007         	goto	l321
   818  000C96                     u1140:
   819  000C96                     
   820                           ;pwm.c: 162:                 tela4();
   821  000C96  ECCE  F00B         	call	_tela4	;wreg free
   822  000C9A                     
   823                           ;pwm.c: 163:                 estado = 6;
   824  000C9A  0E06               	movlw	6
   825  000C9C  6E15               	movwf	_estado^0,c
   826  000C9E  EF59  F007         	goto	l321
   827  000CA2                     l2118:
   828                           
   829                           ;pwm.c: 167:             val = keyboardScan3();
   830  000CA2  EC65  F00B         	call	_keyboardScan3	;wreg free
   831  000CA6  6E2B               	movwf	maqEstados@val^0,c
   832  000CA8                     
   833                           ;pwm.c: 168:             if(val == '1') {
   834  000CA8  0E31               	movlw	49
   835  000CAA  182B               	xorwf	maqEstados@val^0,w,c
   836  000CAC  A4D8               	btfss	status,2,c
   837  000CAE  EF5B  F006         	goto	u1151
   838  000CB2  EF5D  F006         	goto	u1150
   839  000CB6                     u1151:
   840  000CB6  EF63  F006         	goto	l2126
   841  000CBA                     u1150:
   842  000CBA                     
   843                           ;pwm.c: 169:                 estado = 3;
   844  000CBA  0E03               	movlw	3
   845  000CBC  6E15               	movwf	_estado^0,c
   846                           
   847                           ;pwm.c: 170:                 selecao = 1;
   848  000CBE  0E01               	movlw	1
   849  000CC0  6E17               	movwf	_selecao^0,c
   850  000CC2                     
   851                           ;pwm.c: 171:                 tela2();
   852  000CC2  EC39  F00B         	call	_tela2	;wreg free
   853  000CC6                     l2126:
   854                           
   855                           ;pwm.c: 173:             if(val == '2') {
   856  000CC6  0E32               	movlw	50
   857  000CC8  182B               	xorwf	maqEstados@val^0,w,c
   858  000CCA  A4D8               	btfss	status,2,c
   859  000CCC  EF6A  F006         	goto	u1161
   860  000CD0  EF6C  F006         	goto	u1160
   861  000CD4                     u1161:
   862  000CD4  EF72  F006         	goto	l2132
   863  000CD8                     u1160:
   864  000CD8                     
   865                           ;pwm.c: 174:                 estado = 3;
   866  000CD8  0E03               	movlw	3
   867  000CDA  6E15               	movwf	_estado^0,c
   868                           
   869                           ;pwm.c: 175:                 selecao = 2;
   870  000CDC  0E02               	movlw	2
   871  000CDE  6E17               	movwf	_selecao^0,c
   872  000CE0                     
   873                           ;pwm.c: 176:                 tela2();
   874  000CE0  EC39  F00B         	call	_tela2	;wreg free
   875  000CE4                     l2132:
   876                           
   877                           ;pwm.c: 178:             if(val == '3') {
   878  000CE4  0E33               	movlw	51
   879  000CE6  182B               	xorwf	maqEstados@val^0,w,c
   880  000CE8  A4D8               	btfss	status,2,c
   881  000CEA  EF79  F006         	goto	u1171
   882  000CEE  EF7B  F006         	goto	u1170
   883  000CF2                     u1171:
   884  000CF2  EF81  F006         	goto	l2138
   885  000CF6                     u1170:
   886  000CF6                     
   887                           ;pwm.c: 179:                 estado = 3;
   888  000CF6  0E03               	movlw	3
   889  000CF8  6E15               	movwf	_estado^0,c
   890                           
   891                           ;pwm.c: 180:                 selecao = 3;
   892  000CFA  0E03               	movlw	3
   893  000CFC  6E17               	movwf	_selecao^0,c
   894  000CFE                     
   895                           ;pwm.c: 181:                 tela2();
   896  000CFE  EC39  F00B         	call	_tela2	;wreg free
   897  000D02                     l2138:
   898                           
   899                           ;pwm.c: 183:             if(val == '4') {
   900  000D02  0E34               	movlw	52
   901  000D04  182B               	xorwf	maqEstados@val^0,w,c
   902  000D06  A4D8               	btfss	status,2,c
   903  000D08  EF88  F006         	goto	u1181
   904  000D0C  EF8A  F006         	goto	u1180
   905  000D10                     u1181:
   906  000D10  EF90  F006         	goto	l2144
   907  000D14                     u1180:
   908  000D14                     
   909                           ;pwm.c: 184:                 estado = 3;
   910  000D14  0E03               	movlw	3
   911  000D16  6E15               	movwf	_estado^0,c
   912                           
   913                           ;pwm.c: 185:                 selecao = 4;
   914  000D18  0E04               	movlw	4
   915  000D1A  6E17               	movwf	_selecao^0,c
   916  000D1C                     
   917                           ;pwm.c: 186:                 tela2();
   918  000D1C  EC39  F00B         	call	_tela2	;wreg free
   919  000D20                     l2144:
   920                           
   921                           ;pwm.c: 188:             if(val == '*') {
   922  000D20  0E2A               	movlw	42
   923  000D22  182B               	xorwf	maqEstados@val^0,w,c
   924  000D24  A4D8               	btfss	status,2,c
   925  000D26  EF97  F006         	goto	u1191
   926  000D2A  EF99  F006         	goto	u1190
   927  000D2E                     u1191:
   928  000D2E  EF59  F007         	goto	l321
   929  000D32                     u1190:
   930  000D32                     
   931                           ;pwm.c: 189:                 estado = 1;
   932  000D32  0E01               	movlw	1
   933  000D34  6E15               	movwf	_estado^0,c
   934  000D36                     
   935                           ;pwm.c: 190:                 tela1();
   936  000D36  EC8B  F00B         	call	_tela1	;wreg free
   937  000D3A  EF59  F007         	goto	l321
   938  000D3E                     l2150:
   939                           
   940                           ;pwm.c: 194:                 val = keyboardScan3();
   941  000D3E  EC65  F00B         	call	_keyboardScan3	;wreg free
   942  000D42  6E2B               	movwf	maqEstados@val^0,c
   943  000D44                     
   944                           ;pwm.c: 195:                 adc = isr_AD()/16;
   945  000D44  EC72  F00B         	call	_isr_AD	;wreg free
   946  000D48  C01D  F01F         	movff	?_isr_AD,___awdiv@dividend
   947  000D4C  C01E  F020         	movff	?_isr_AD+1,___awdiv@dividend+1
   948  000D50  0E00               	movlw	0
   949  000D52  6E22               	movwf	(___awdiv@divisor+1)^0,c
   950  000D54  0E10               	movlw	16
   951  000D56  6E21               	movwf	___awdiv@divisor^0,c
   952  000D58  EC30  F009         	call	___awdiv	;wreg free
   953  000D5C  C01F  F029         	movff	?___awdiv,maqEstados@adc
   954  000D60  C020  F02A         	movff	?___awdiv+1,maqEstados@adc+1
   955  000D64                     
   956                           ;pwm.c: 197:                 flamis = pwm;
   957  000D64  C011  F031         	movff	_pwm,_flamis
   958  000D68  C012  F032         	movff	_pwm+1,_flamis+1
   959  000D6C                     
   960                           ;pwm.c: 198:                 set_duty(adc);
   961  000D6C  C029  F01B         	movff	maqEstados@adc,set_duty@val
   962  000D70  C02A  F01C         	movff	maqEstados@adc+1,set_duty@val+1
   963  000D74  ECD5  F00B         	call	_set_duty	;wreg free
   964  000D78                     
   965                           ;pwm.c: 199:             if(val == '1'){
   966  000D78  0E31               	movlw	49
   967  000D7A  182B               	xorwf	maqEstados@val^0,w,c
   968  000D7C  A4D8               	btfss	status,2,c
   969  000D7E  EFC3  F006         	goto	u1201
   970  000D82  EFC5  F006         	goto	u1200
   971  000D86                     u1201:
   972  000D86  EFC9  F006         	goto	l2164
   973  000D8A                     u1200:
   974  000D8A                     
   975                           ;pwm.c: 200:                 estado = 4;
   976  000D8A  0E04               	movlw	4
   977  000D8C  6E15               	movwf	_estado^0,c
   978  000D8E                     
   979                           ;pwm.c: 201:                 tela31();
   980  000D8E  EC2A  F00B         	call	_tela31	;wreg free
   981  000D92                     l2164:
   982                           
   983                           ;pwm.c: 203:             if(val == '2'){
   984  000D92  0E32               	movlw	50
   985  000D94  182B               	xorwf	maqEstados@val^0,w,c
   986  000D96  A4D8               	btfss	status,2,c
   987  000D98  EFD0  F006         	goto	u1211
   988  000D9C  EFD2  F006         	goto	u1210
   989  000DA0                     u1211:
   990  000DA0  EF59  F007         	goto	l321
   991  000DA4                     u1210:
   992  000DA4                     
   993                           ;pwm.c: 204:                 estado = 5;
   994  000DA4  0E05               	movlw	5
   995  000DA6  6E15               	movwf	_estado^0,c
   996  000DA8                     
   997                           ;pwm.c: 205:                 tela32();
   998  000DA8  EC1B  F00B         	call	_tela32	;wreg free
   999  000DAC  EF59  F007         	goto	l321
  1000  000DB0                     l2170:
  1001                           
  1002                           ;pwm.c: 209:             val = keyboardScan3();
  1003  000DB0  EC65  F00B         	call	_keyboardScan3	;wreg free
  1004  000DB4  6E2B               	movwf	maqEstados@val^0,c
  1005  000DB6                     
  1006                           ;pwm.c: 210:             if(val == '#'){
  1007  000DB6  0E23               	movlw	35
  1008  000DB8  182B               	xorwf	maqEstados@val^0,w,c
  1009  000DBA  A4D8               	btfss	status,2,c
  1010  000DBC  EFE2  F006         	goto	u1221
  1011  000DC0  EFE4  F006         	goto	u1220
  1012  000DC4                     u1221:
  1013  000DC4  EFF1  F006         	goto	l2184
  1014  000DC8                     u1220:
  1015  000DC8                     
  1016                           ;pwm.c: 211:                 estado = 1;
  1017  000DC8  0E01               	movlw	1
  1018  000DCA  6E15               	movwf	_estado^0,c
  1019  000DCC                     
  1020                           ;pwm.c: 212:                 selecaoServos(0x00);
  1021  000DCC  0E00               	movlw	0
  1022  000DCE  EC92  F009         	call	_selecaoServos
  1023  000DD2                     
  1024                           ;pwm.c: 213:                 flamis = 0;
  1025  000DD2  0E00               	movlw	0
  1026  000DD4  6E32               	movwf	(_flamis+1)^0,c
  1027  000DD6  0E00               	movlw	0
  1028  000DD8  6E31               	movwf	_flamis^0,c
  1029  000DDA                     
  1030                           ;pwm.c: 214:                 selecao = 0;
  1031  000DDA  0E00               	movlw	0
  1032  000DDC  6E17               	movwf	_selecao^0,c
  1033  000DDE                     
  1034                           ;pwm.c: 215:                 tela0();
  1035  000DDE  EC97  F00B         	call	_tela0	;wreg free
  1036  000DE2                     l2184:
  1037                           
  1038                           ;pwm.c: 217:             if(val == '*'){
  1039  000DE2  0E2A               	movlw	42
  1040  000DE4  182B               	xorwf	maqEstados@val^0,w,c
  1041  000DE6  A4D8               	btfss	status,2,c
  1042  000DE8  EFF8  F006         	goto	u1231
  1043  000DEC  EFFA  F006         	goto	u1230
  1044  000DF0                     u1231:
  1045  000DF0  EF59  F007         	goto	l321
  1046  000DF4                     u1230:
  1047  000DF4                     l2186:
  1048                           
  1049                           ;pwm.c: 218:                 estado = 1;
  1050  000DF4  0E01               	movlw	1
  1051  000DF6  6E15               	movwf	_estado^0,c
  1052  000DF8                     
  1053                           ;pwm.c: 219:                 set_duty(flamis);
  1054  000DF8  C031  F01B         	movff	_flamis,set_duty@val
  1055  000DFC  C032  F01C         	movff	_flamis+1,set_duty@val+1
  1056  000E00  ECD5  F00B         	call	_set_duty	;wreg free
  1057  000E04                     
  1058                           ;pwm.c: 220:                 flamis = 0;
  1059  000E04  0E00               	movlw	0
  1060  000E06  6E32               	movwf	(_flamis+1)^0,c
  1061  000E08  0E00               	movlw	0
  1062  000E0A  6E31               	movwf	_flamis^0,c
  1063  000E0C                     
  1064                           ;pwm.c: 221:                 selecao = 0;
  1065  000E0C  0E00               	movlw	0
  1066  000E0E  6E17               	movwf	_selecao^0,c
  1067  000E10                     
  1068                           ;pwm.c: 222:                 tela0();
  1069  000E10  EC97  F00B         	call	_tela0	;wreg free
  1070  000E14  EF59  F007         	goto	l321
  1071  000E18                     l2196:
  1072                           
  1073                           ;pwm.c: 226:             val = keyboardScan3();
  1074  000E18  EC65  F00B         	call	_keyboardScan3	;wreg free
  1075  000E1C  6E2B               	movwf	maqEstados@val^0,c
  1076  000E1E                     
  1077                           ;pwm.c: 227:             if(val == '#'){
  1078  000E1E  0E23               	movlw	35
  1079  000E20  182B               	xorwf	maqEstados@val^0,w,c
  1080  000E22  A4D8               	btfss	status,2,c
  1081  000E24  EF16  F007         	goto	u1241
  1082  000E28  EF18  F007         	goto	u1240
  1083  000E2C                     u1241:
  1084  000E2C  EF25  F007         	goto	l2210
  1085  000E30                     u1240:
  1086  000E30                     
  1087                           ;pwm.c: 228:                 estado = 1;
  1088  000E30  0E01               	movlw	1
  1089  000E32  6E15               	movwf	_estado^0,c
  1090  000E34                     
  1091                           ;pwm.c: 229:                 selecaoServos(0x01);
  1092  000E34  0E01               	movlw	1
  1093  000E36  EC92  F009         	call	_selecaoServos
  1094  000E3A                     
  1095                           ;pwm.c: 230:                 flamis = 0;
  1096  000E3A  0E00               	movlw	0
  1097  000E3C  6E32               	movwf	(_flamis+1)^0,c
  1098  000E3E  0E00               	movlw	0
  1099  000E40  6E31               	movwf	_flamis^0,c
  1100  000E42                     
  1101                           ;pwm.c: 231:                 selecao = 0;
  1102  000E42  0E00               	movlw	0
  1103  000E44  6E17               	movwf	_selecao^0,c
  1104  000E46                     
  1105                           ;pwm.c: 232:                 tela0();
  1106  000E46  EC97  F00B         	call	_tela0	;wreg free
  1107  000E4A                     l2210:
  1108                           
  1109                           ;pwm.c: 234:             if(val == '*'){
  1110  000E4A  0E2A               	movlw	42
  1111  000E4C  182B               	xorwf	maqEstados@val^0,w,c
  1112  000E4E  A4D8               	btfss	status,2,c
  1113  000E50  EF2C  F007         	goto	u1251
  1114  000E54  EF2E  F007         	goto	u1250
  1115  000E58                     u1251:
  1116  000E58  EF59  F007         	goto	l321
  1117  000E5C                     u1250:
  1118  000E5C  EFFA  F006         	goto	l2186
  1119  000E60                     l2222:
  1120                           
  1121                           ;pwm.c: 243:             maqTeste();
  1122  000E60  EC5A  F007         	call	_maqTeste	;wreg free
  1123                           
  1124                           ;pwm.c: 244:             break;
  1125  000E64  EF59  F007         	goto	l321
  1126  000E68                     l2226:
  1127  000E68  5015               	movf	_estado^0,w,c
  1128  000E6A  6E27               	movwf	??_maqEstados^0,c
  1129  000E6C  6A28               	clrf	(??_maqEstados+1)^0,c
  1130                           
  1131                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1132                           ; Switch size 1, requested type "simple"
  1133                           ; Number of cases is 1, Range of values is 0 to 0
  1134                           ; switch strategies available:
  1135                           ; Name         Instructions Cycles
  1136                           ; simple_byte            4     3 (average)
  1137                           ;	Chosen strategy is simple_byte
  1138  000E6E  5028               	movf	(??_maqEstados+1)^0,w,c
  1139  000E70  0A00               	xorlw	0	; case 0
  1140  000E72  B4D8               	btfsc	status,2,c
  1141  000E74  EF3E  F007         	goto	l2310
  1142  000E78  EF59  F007         	goto	l321
  1143  000E7C                     l2310:
  1144                           
  1145                           ; Switch size 1, requested type "simple"
  1146                           ; Number of cases is 6, Range of values is 1 to 6
  1147                           ; switch strategies available:
  1148                           ; Name         Instructions Cycles
  1149                           ; simple_byte           19    10 (average)
  1150                           ;	Chosen strategy is simple_byte
  1151  000E7C  5027               	movf	??_maqEstados^0,w,c
  1152  000E7E  0A01               	xorlw	1	; case 1
  1153  000E80  B4D8               	btfsc	status,2,c
  1154  000E82  EF32  F006         	goto	l2104
  1155  000E86  0A03               	xorlw	3	; case 2
  1156  000E88  B4D8               	btfsc	status,2,c
  1157  000E8A  EF51  F006         	goto	l2118
  1158  000E8E  0A01               	xorlw	1	; case 3
  1159  000E90  B4D8               	btfsc	status,2,c
  1160  000E92  EF9F  F006         	goto	l2150
  1161  000E96  0A07               	xorlw	7	; case 4
  1162  000E98  B4D8               	btfsc	status,2,c
  1163  000E9A  EFD8  F006         	goto	l2170
  1164  000E9E  0A01               	xorlw	1	; case 5
  1165  000EA0  B4D8               	btfsc	status,2,c
  1166  000EA2  EF0C  F007         	goto	l2196
  1167  000EA6  0A03               	xorlw	3	; case 6
  1168  000EA8  B4D8               	btfsc	status,2,c
  1169  000EAA  EF30  F007         	goto	l2222
  1170  000EAE  EF59  F007         	goto	l321
  1171  000EB2                     l321:
  1172  000EB2  0012               	return		;funcret
  1173  000EB4                     __end_of_maqEstados:
  1174                           	opt callstack 0
  1175                           
  1176 ;; *************** function _tela4 *****************
  1177 ;; Defined at:
  1178 ;;		line 276 in file "pwm.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1192 ;;      Params:         0       0       0       0       0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1195 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1196 ;;Total ram usage:        0 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    6
  1199 ;; This function calls:
  1200 ;;		_lcd_string
  1201 ;; This function is called by:
  1202 ;;		_maqEstados
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text2
  1207  00179C                     __ptext2:
  1208                           	opt callstack 0
  1209  00179C                     _tela4:
  1210                           	opt callstack 23
  1211  00179C                     
  1212                           ;pwm.c: 277:     lcd_string("\fPressione *-ESC\nS:    pwm:");
  1213  00179C  0E9F               	movlw	low STR_6
  1214  00179E  6E1E               	movwf	lcd_string@ch^0,c
  1215  0017A0  0E08               	movlw	high STR_6
  1216  0017A2  6E1F               	movwf	(lcd_string@ch+1)^0,c
  1217  0017A4  ECEB  F009         	call	_lcd_string	;wreg free
  1218  0017A8  0012               	return		;funcret
  1219  0017AA                     __end_of_tela4:
  1220                           	opt callstack 0
  1221                           
  1222 ;; *************** function _tela32 *****************
  1223 ;; Defined at:
  1224 ;;		line 270 in file "pwm.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1238 ;;      Params:         0       0       0       0       0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1240 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1241 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1242 ;;Total ram usage:        0 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    6
  1245 ;; This function calls:
  1246 ;;		_lcd_display3
  1247 ;;		_lcd_string
  1248 ;;		_lcd_write4
  1249 ;; This function is called by:
  1250 ;;		_maqEstados
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text3
  1255  001636                     __ptext3:
  1256                           	opt callstack 0
  1257  001636                     _tela32:
  1258                           	opt callstack 23
  1259  001636                     
  1260                           ;pwm.c: 271:     lcd_string("\fSalvar Posi-2 S\n*-ESC #-ENTER");
  1261  001636  0E80               	movlw	low STR_5
  1262  001638  6E1E               	movwf	lcd_string@ch^0,c
  1263  00163A  0E08               	movlw	high STR_5
  1264  00163C  6E1F               	movwf	(lcd_string@ch+1)^0,c
  1265  00163E  ECEB  F009         	call	_lcd_string	;wreg free
  1266  001642                     
  1267                           ;pwm.c: 272:     lcd_write4(0x80+0*0x40+15,0);;
  1268  001642  0E00               	movlw	0
  1269  001644  6E1C               	movwf	lcd_write4@_rs^0,c
  1270  001646  0E8F               	movlw	143
  1271  001648  ECEB  F00A         	call	_lcd_write4
  1272  00164C                     
  1273                           ;pwm.c: 273:     lcd_display3(selecao);
  1274  00164C  5017               	movf	_selecao^0,w,c
  1275  00164E  EC78  F00A         	call	_lcd_display3
  1276  001652  0012               	return		;funcret
  1277  001654                     __end_of_tela32:
  1278                           	opt callstack 0
  1279                           
  1280 ;; *************** function _tela31 *****************
  1281 ;; Defined at:
  1282 ;;		line 264 in file "pwm.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;		None
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;		None
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1296 ;;      Params:         0       0       0       0       0       0       0       0       0
  1297 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1299 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1300 ;;Total ram usage:        0 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    6
  1303 ;; This function calls:
  1304 ;;		_lcd_display3
  1305 ;;		_lcd_string
  1306 ;;		_lcd_write4
  1307 ;; This function is called by:
  1308 ;;		_maqEstados
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text4
  1313  001654                     __ptext4:
  1314                           	opt callstack 0
  1315  001654                     _tela31:
  1316                           	opt callstack 23
  1317  001654                     
  1318                           ;pwm.c: 265:     lcd_string("\fSalvar Posi-1 S\n*-ESC #-ENTER");
  1319  001654  0E61               	movlw	low STR_4
  1320  001656  6E1E               	movwf	lcd_string@ch^0,c
  1321  001658  0E08               	movlw	high STR_4
  1322  00165A  6E1F               	movwf	(lcd_string@ch+1)^0,c
  1323  00165C  ECEB  F009         	call	_lcd_string	;wreg free
  1324  001660                     
  1325                           ;pwm.c: 266:     lcd_write4(0x80+0*0x40+15,0);;
  1326  001660  0E00               	movlw	0
  1327  001662  6E1C               	movwf	lcd_write4@_rs^0,c
  1328  001664  0E8F               	movlw	143
  1329  001666  ECEB  F00A         	call	_lcd_write4
  1330  00166A                     
  1331                           ;pwm.c: 267:     lcd_display3(selecao);
  1332  00166A  5017               	movf	_selecao^0,w,c
  1333  00166C  EC78  F00A         	call	_lcd_display3
  1334  001670  0012               	return		;funcret
  1335  001672                     __end_of_tela31:
  1336                           	opt callstack 0
  1337                           
  1338 ;; *************** function _tela2 *****************
  1339 ;; Defined at:
  1340 ;;		line 258 in file "pwm.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;		None
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0
  1355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1357 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1358 ;;Total ram usage:        0 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    6
  1361 ;; This function calls:
  1362 ;;		_lcd_display3
  1363 ;;		_lcd_string
  1364 ;;		_lcd_write4
  1365 ;; This function is called by:
  1366 ;;		_maqEstados
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text5
  1371  001672                     __ptext5:
  1372                           	opt callstack 0
  1373  001672                     _tela2:
  1374                           	opt callstack 23
  1375  001672                     
  1376                           ;pwm.c: 259:     lcd_string("\fEscolha Mov-S\n1-P1 2-P2");
  1377  001672  0EBB               	movlw	low STR_3
  1378  001674  6E1E               	movwf	lcd_string@ch^0,c
  1379  001676  0E08               	movlw	high STR_3
  1380  001678  6E1F               	movwf	(lcd_string@ch+1)^0,c
  1381  00167A  ECEB  F009         	call	_lcd_string	;wreg free
  1382  00167E                     
  1383                           ;pwm.c: 260:     lcd_write4(0x80+0*0x40+13,0);;
  1384  00167E  0E00               	movlw	0
  1385  001680  6E1C               	movwf	lcd_write4@_rs^0,c
  1386  001682  0E8D               	movlw	141
  1387  001684  ECEB  F00A         	call	_lcd_write4
  1388  001688                     
  1389                           ;pwm.c: 261:     lcd_display3(selecao);
  1390  001688  5017               	movf	_selecao^0,w,c
  1391  00168A  EC78  F00A         	call	_lcd_display3
  1392  00168E  0012               	return		;funcret
  1393  001690                     __end_of_tela2:
  1394                           	opt callstack 0
  1395                           
  1396 ;; *************** function _tela1 *****************
  1397 ;; Defined at:
  1398 ;;		line 253 in file "pwm.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1412 ;;      Params:         0       0       0       0       0       0       0       0       0
  1413 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1415 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1416 ;;Total ram usage:        0 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    6
  1419 ;; This function calls:
  1420 ;;		_lcd_string
  1421 ;;		_lcd_write4
  1422 ;; This function is called by:
  1423 ;;		_maqEstados
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text6
  1428  001716                     __ptext6:
  1429                           	opt callstack 0
  1430  001716                     _tela1:
  1431                           	opt callstack 23
  1432  001716                     
  1433                           ;pwm.c: 254:     lcd_string("\fEscolha o Servo:\n1 2 3 4 *-ESC");
  1434  001716  0E22               	movlw	low STR_2
  1435  001718  6E1E               	movwf	lcd_string@ch^0,c
  1436  00171A  0E08               	movlw	high STR_2
  1437  00171C  6E1F               	movwf	(lcd_string@ch+1)^0,c
  1438  00171E  ECEB  F009         	call	_lcd_string	;wreg free
  1439  001722                     
  1440                           ;pwm.c: 255:     lcd_write4(0b00001100,0);
  1441  001722  0E00               	movlw	0
  1442  001724  6E1C               	movwf	lcd_write4@_rs^0,c
  1443  001726  0E0C               	movlw	12
  1444  001728  ECEB  F00A         	call	_lcd_write4
  1445  00172C  0012               	return		;funcret
  1446  00172E                     __end_of_tela1:
  1447                           	opt callstack 0
  1448                           
  1449 ;; *************** function _selecaoServos *****************
  1450 ;; Defined at:
  1451 ;;		line 69 in file "pwm.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  p               1    wreg     unsigned char 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  p               1    4[COMRAM] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1465 ;;      Params:         0       0       0       0       0       0       0       0       0
  1466 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1467 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1468 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1469 ;;Total ram usage:        3 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    3
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_maqEstados
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text7
  1480  001324                     __ptext7:
  1481                           	opt callstack 0
  1482  001324                     _selecaoServos:
  1483                           	opt callstack 26
  1484                           
  1485                           ;incstack = 0
  1486                           ;selecaoServos@p stored from wreg
  1487  001324  6E1D               	movwf	selecaoServos@p^0,c
  1488  001326                     
  1489                           ;pwm.c: 70:      switch (selecao) {
  1490  001326  EFCD  F009         	goto	l1358
  1491  00132A                     l1348:
  1492                           
  1493                           ;pwm.c: 72:    duty1[p] = pwm;
  1494  00132A  501D               	movf	selecaoServos@p^0,w,c
  1495  00132C  0D02               	mullw	2
  1496  00132E  0E0D               	movlw	low _duty1
  1497  001330  24F3               	addwf	243,w,c
  1498  001332  6ED9               	movwf	fsr2l,c
  1499  001334  0E00               	movlw	high _duty1
  1500  001336  20F4               	addwfc	prodh,w,c
  1501  001338  6EDA               	movwf	fsr2h,c
  1502  00133A  C011  FFDE         	movff	_pwm,postinc2
  1503  00133E  C012  FFDD         	movff	_pwm+1,postdec2
  1504                           
  1505                           ;pwm.c: 73:   break;
  1506  001342  EFEA  F009         	goto	l284
  1507  001346                     l1350:
  1508                           
  1509                           ;pwm.c: 75:    duty2[p] = pwm;
  1510  001346  501D               	movf	selecaoServos@p^0,w,c
  1511  001348  0D02               	mullw	2
  1512  00134A  0E09               	movlw	low _duty2
  1513  00134C  24F3               	addwf	243,w,c
  1514  00134E  6ED9               	movwf	fsr2l,c
  1515  001350  0E00               	movlw	high _duty2
  1516  001352  20F4               	addwfc	prodh,w,c
  1517  001354  6EDA               	movwf	fsr2h,c
  1518  001356  C011  FFDE         	movff	_pwm,postinc2
  1519  00135A  C012  FFDD         	movff	_pwm+1,postdec2
  1520                           
  1521                           ;pwm.c: 76:   break;
  1522  00135E  EFEA  F009         	goto	l284
  1523  001362                     l1352:
  1524                           
  1525                           ;pwm.c: 78:    duty3[p] = pwm;
  1526  001362  501D               	movf	selecaoServos@p^0,w,c
  1527  001364  0D02               	mullw	2
  1528  001366  0E05               	movlw	low _duty3
  1529  001368  24F3               	addwf	243,w,c
  1530  00136A  6ED9               	movwf	fsr2l,c
  1531  00136C  0E00               	movlw	high _duty3
  1532  00136E  20F4               	addwfc	prodh,w,c
  1533  001370  6EDA               	movwf	fsr2h,c
  1534  001372  C011  FFDE         	movff	_pwm,postinc2
  1535  001376  C012  FFDD         	movff	_pwm+1,postdec2
  1536                           
  1537                           ;pwm.c: 79:   break;
  1538  00137A  EFEA  F009         	goto	l284
  1539  00137E                     l1354:
  1540                           
  1541                           ;pwm.c: 81:    duty4[p] = pwm;
  1542  00137E  501D               	movf	selecaoServos@p^0,w,c
  1543  001380  0D02               	mullw	2
  1544  001382  0E01               	movlw	low _duty4
  1545  001384  24F3               	addwf	243,w,c
  1546  001386  6ED9               	movwf	fsr2l,c
  1547  001388  0E00               	movlw	high _duty4
  1548  00138A  20F4               	addwfc	prodh,w,c
  1549  00138C  6EDA               	movwf	fsr2h,c
  1550  00138E  C011  FFDE         	movff	_pwm,postinc2
  1551  001392  C012  FFDD         	movff	_pwm+1,postdec2
  1552                           
  1553                           ;pwm.c: 82:   break;
  1554  001396  EFEA  F009         	goto	l284
  1555  00139A                     l1358:
  1556  00139A  5017               	movf	_selecao^0,w,c
  1557  00139C  6E1B               	movwf	??_selecaoServos^0,c
  1558  00139E  6A1C               	clrf	(??_selecaoServos+1)^0,c
  1559                           
  1560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1561                           ; Switch size 1, requested type "simple"
  1562                           ; Number of cases is 1, Range of values is 0 to 0
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte            4     3 (average)
  1566                           ;	Chosen strategy is simple_byte
  1567  0013A0  501C               	movf	(??_selecaoServos+1)^0,w,c
  1568  0013A2  0A00               	xorlw	0	; case 0
  1569  0013A4  B4D8               	btfsc	status,2,c
  1570  0013A6  EFD7  F009         	goto	l2312
  1571  0013AA  EFEA  F009         	goto	l284
  1572  0013AE                     l2312:
  1573                           
  1574                           ; Switch size 1, requested type "simple"
  1575                           ; Number of cases is 4, Range of values is 1 to 4
  1576                           ; switch strategies available:
  1577                           ; Name         Instructions Cycles
  1578                           ; simple_byte           13     7 (average)
  1579                           ;	Chosen strategy is simple_byte
  1580  0013AE  501B               	movf	??_selecaoServos^0,w,c
  1581  0013B0  0A01               	xorlw	1	; case 1
  1582  0013B2  B4D8               	btfsc	status,2,c
  1583  0013B4  EF95  F009         	goto	l1348
  1584  0013B8  0A03               	xorlw	3	; case 2
  1585  0013BA  B4D8               	btfsc	status,2,c
  1586  0013BC  EFA3  F009         	goto	l1350
  1587  0013C0  0A01               	xorlw	1	; case 3
  1588  0013C2  B4D8               	btfsc	status,2,c
  1589  0013C4  EFB1  F009         	goto	l1352
  1590  0013C8  0A07               	xorlw	7	; case 4
  1591  0013CA  B4D8               	btfsc	status,2,c
  1592  0013CC  EFBF  F009         	goto	l1354
  1593  0013D0  EFEA  F009         	goto	l284
  1594  0013D4                     l284:
  1595  0013D4  0012               	return		;funcret
  1596  0013D6                     __end_of_selecaoServos:
  1597                           	opt callstack 0
  1598                           
  1599 ;; *************** function _maqTeste *****************
  1600 ;; Defined at:
  1601 ;;		line 86 in file "pwm.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  val             1   11[COMRAM] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1615 ;;      Params:         0       0       0       0       0       0       0       0       0
  1616 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1617 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1618 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1619 ;;Total ram usage:        3 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    7
  1622 ;; This function calls:
  1623 ;;		_keyboardScan3
  1624 ;;		_lcd_display3
  1625 ;;		_lcd_write4
  1626 ;;		_set_duty
  1627 ;;		_tela0
  1628 ;; This function is called by:
  1629 ;;		_maqEstados
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text8
  1634  000EB4                     __ptext8:
  1635                           	opt callstack 0
  1636  000EB4                     _maqTeste:
  1637                           	opt callstack 22
  1638  000EB4                     
  1639                           ;pwm.c: 88:     switch (retsak) {
  1640  000EB4  EF4A  F008         	goto	l2014
  1641  000EB8                     l1932:
  1642                           
  1643                           ;pwm.c: 90:             val = keyboardScan3();
  1644  000EB8  EC65  F00B         	call	_keyboardScan3	;wreg free
  1645  000EBC  6E24               	movwf	maqTeste@val^0,c
  1646  000EBE                     
  1647                           ;pwm.c: 91:             selecao = 1;
  1648  000EBE  0E01               	movlw	1
  1649  000EC0  6E17               	movwf	_selecao^0,c
  1650  000EC2                     
  1651                           ;pwm.c: 92:             set_duty(duty1[flag]);
  1652  000EC2  B02E               	btfsc	(_flag/(0+8))^0,_flag& (0+7),c
  1653  000EC4  EF66  F007         	goto	u951
  1654  000EC8  EF69  F007         	goto	u950
  1655  000ECC                     u951:
  1656  000ECC  0E01               	movlw	1
  1657  000ECE  EF6A  F007         	goto	u960
  1658  000ED2                     u950:
  1659  000ED2  0E00               	movlw	0
  1660  000ED4                     u960:
  1661  000ED4  6E22               	movwf	??_maqTeste^0,c
  1662  000ED6  6A23               	clrf	(??_maqTeste+1)^0,c
  1663  000ED8  90D8               	bcf	status,0,c
  1664  000EDA  3622               	rlcf	??_maqTeste^0,f,c
  1665  000EDC  3623               	rlcf	(??_maqTeste+1)^0,f,c
  1666  000EDE  0E0D               	movlw	low _duty1
  1667  000EE0  2422               	addwf	??_maqTeste^0,w,c
  1668  000EE2  6ED9               	movwf	fsr2l,c
  1669  000EE4  0E00               	movlw	high _duty1
  1670  000EE6  2023               	addwfc	(??_maqTeste+1)^0,w,c
  1671  000EE8  6EDA               	movwf	fsr2h,c
  1672  000EEA  CFDE F01B          	movff	postinc2,set_duty@val
  1673  000EEE  CFDD F01C          	movff	postdec2,set_duty@val+1
  1674  000EF2  ECD5  F00B         	call	_set_duty	;wreg free
  1675  000EF6                     
  1676                           ;pwm.c: 93:             lcd_write4(0x80+1*0x40+2,0);;
  1677  000EF6  0E00               	movlw	0
  1678  000EF8  6E1C               	movwf	lcd_write4@_rs^0,c
  1679  000EFA  0EC2               	movlw	194
  1680  000EFC  ECEB  F00A         	call	_lcd_write4
  1681  000F00                     
  1682                           ;pwm.c: 94:             lcd_display3(selecao);
  1683  000F00  5017               	movf	_selecao^0,w,c
  1684  000F02  EC78  F00A         	call	_lcd_display3
  1685  000F06                     
  1686                           ;pwm.c: 95:             lcd_write4(0x80+1*0x40+10,0);;
  1687  000F06  0E00               	movlw	0
  1688  000F08  6E1C               	movwf	lcd_write4@_rs^0,c
  1689  000F0A  0ECA               	movlw	202
  1690  000F0C  ECEB  F00A         	call	_lcd_write4
  1691  000F10                     
  1692                           ;pwm.c: 96:             lcd_display3(pwm);
  1693  000F10  5011               	movf	_pwm^0,w,c
  1694  000F12  EC78  F00A         	call	_lcd_display3
  1695  000F16                     
  1696                           ;pwm.c: 97:              if(val == '*'){
  1697  000F16  0E2A               	movlw	42
  1698  000F18  1824               	xorwf	maqTeste@val^0,w,c
  1699  000F1A  A4D8               	btfss	status,2,c
  1700  000F1C  EF92  F007         	goto	u971
  1701  000F20  EF94  F007         	goto	u970
  1702  000F24                     u971:
  1703  000F24  EF67  F008         	goto	l297
  1704  000F28                     u970:
  1705  000F28                     l1948:
  1706                           
  1707                           ;pwm.c: 98:                 estado = 1;
  1708  000F28  0E01               	movlw	1
  1709  000F2A  6E15               	movwf	_estado^0,c
  1710                           
  1711                           ;pwm.c: 99:                 selecao = 0;
  1712  000F2C  0E00               	movlw	0
  1713  000F2E  6E17               	movwf	_selecao^0,c
  1714  000F30                     
  1715                           ;pwm.c: 100:                 tela0();
  1716  000F30  EC97  F00B         	call	_tela0	;wreg free
  1717  000F34  EF67  F008         	goto	l297
  1718  000F38                     l1952:
  1719                           
  1720                           ;pwm.c: 105:             val = keyboardScan3();
  1721  000F38  EC65  F00B         	call	_keyboardScan3	;wreg free
  1722  000F3C  6E24               	movwf	maqTeste@val^0,c
  1723  000F3E                     
  1724                           ;pwm.c: 106:             selecao = 2;
  1725  000F3E  0E02               	movlw	2
  1726  000F40  6E17               	movwf	_selecao^0,c
  1727  000F42                     
  1728                           ;pwm.c: 107:             set_duty(duty2[flag]);
  1729  000F42  B02E               	btfsc	(_flag/(0+8))^0,_flag& (0+7),c
  1730  000F44  EFA6  F007         	goto	u981
  1731  000F48  EFA9  F007         	goto	u980
  1732  000F4C                     u981:
  1733  000F4C  0E01               	movlw	1
  1734  000F4E  EFAA  F007         	goto	u990
  1735  000F52                     u980:
  1736  000F52  0E00               	movlw	0
  1737  000F54                     u990:
  1738  000F54  6E22               	movwf	??_maqTeste^0,c
  1739  000F56  6A23               	clrf	(??_maqTeste+1)^0,c
  1740  000F58  90D8               	bcf	status,0,c
  1741  000F5A  3622               	rlcf	??_maqTeste^0,f,c
  1742  000F5C  3623               	rlcf	(??_maqTeste+1)^0,f,c
  1743  000F5E  0E09               	movlw	low _duty2
  1744  000F60  2422               	addwf	??_maqTeste^0,w,c
  1745  000F62  6ED9               	movwf	fsr2l,c
  1746  000F64  0E00               	movlw	high _duty2
  1747  000F66  2023               	addwfc	(??_maqTeste+1)^0,w,c
  1748  000F68  6EDA               	movwf	fsr2h,c
  1749  000F6A  CFDE F01B          	movff	postinc2,set_duty@val
  1750  000F6E  CFDD F01C          	movff	postdec2,set_duty@val+1
  1751  000F72  ECD5  F00B         	call	_set_duty	;wreg free
  1752  000F76                     
  1753                           ;pwm.c: 108:             lcd_write4(0x80+1*0x40+2,0);;
  1754  000F76  0E00               	movlw	0
  1755  000F78  6E1C               	movwf	lcd_write4@_rs^0,c
  1756  000F7A  0EC2               	movlw	194
  1757  000F7C  ECEB  F00A         	call	_lcd_write4
  1758  000F80                     
  1759                           ;pwm.c: 109:             lcd_display3(selecao);
  1760  000F80  5017               	movf	_selecao^0,w,c
  1761  000F82  EC78  F00A         	call	_lcd_display3
  1762  000F86                     
  1763                           ;pwm.c: 110:             lcd_write4(0x80+1*0x40+10,0);;
  1764  000F86  0E00               	movlw	0
  1765  000F88  6E1C               	movwf	lcd_write4@_rs^0,c
  1766  000F8A  0ECA               	movlw	202
  1767  000F8C  ECEB  F00A         	call	_lcd_write4
  1768  000F90                     
  1769                           ;pwm.c: 111:             lcd_display3(pwm);
  1770  000F90  5011               	movf	_pwm^0,w,c
  1771  000F92  EC78  F00A         	call	_lcd_display3
  1772  000F96                     
  1773                           ;pwm.c: 112:              if(val == '*'){
  1774  000F96  0E2A               	movlw	42
  1775  000F98  1824               	xorwf	maqTeste@val^0,w,c
  1776  000F9A  A4D8               	btfss	status,2,c
  1777  000F9C  EFD2  F007         	goto	u1001
  1778  000FA0  EFD4  F007         	goto	u1000
  1779  000FA4                     u1001:
  1780  000FA4  EF67  F008         	goto	l297
  1781  000FA8                     u1000:
  1782  000FA8  EF94  F007         	goto	l1948
  1783  000FAC                     l1972:
  1784                           
  1785                           ;pwm.c: 120:             val = keyboardScan3();
  1786  000FAC  EC65  F00B         	call	_keyboardScan3	;wreg free
  1787  000FB0  6E24               	movwf	maqTeste@val^0,c
  1788  000FB2                     
  1789                           ;pwm.c: 121:             selecao = 3;
  1790  000FB2  0E03               	movlw	3
  1791  000FB4  6E17               	movwf	_selecao^0,c
  1792  000FB6                     
  1793                           ;pwm.c: 122:             set_duty(duty3[flag]);
  1794  000FB6  B02E               	btfsc	(_flag/(0+8))^0,_flag& (0+7),c
  1795  000FB8  EFE0  F007         	goto	u1011
  1796  000FBC  EFE3  F007         	goto	u1010
  1797  000FC0                     u1011:
  1798  000FC0  0E01               	movlw	1
  1799  000FC2  EFE4  F007         	goto	u1020
  1800  000FC6                     u1010:
  1801  000FC6  0E00               	movlw	0
  1802  000FC8                     u1020:
  1803  000FC8  6E22               	movwf	??_maqTeste^0,c
  1804  000FCA  6A23               	clrf	(??_maqTeste+1)^0,c
  1805  000FCC  90D8               	bcf	status,0,c
  1806  000FCE  3622               	rlcf	??_maqTeste^0,f,c
  1807  000FD0  3623               	rlcf	(??_maqTeste+1)^0,f,c
  1808  000FD2  0E05               	movlw	low _duty3
  1809  000FD4  2422               	addwf	??_maqTeste^0,w,c
  1810  000FD6  6ED9               	movwf	fsr2l,c
  1811  000FD8  0E00               	movlw	high _duty3
  1812  000FDA  2023               	addwfc	(??_maqTeste+1)^0,w,c
  1813  000FDC  6EDA               	movwf	fsr2h,c
  1814  000FDE  CFDE F01B          	movff	postinc2,set_duty@val
  1815  000FE2  CFDD F01C          	movff	postdec2,set_duty@val+1
  1816  000FE6  ECD5  F00B         	call	_set_duty	;wreg free
  1817  000FEA                     
  1818                           ;pwm.c: 123:             lcd_write4(0x80+1*0x40+2,0);;
  1819  000FEA  0E00               	movlw	0
  1820  000FEC  6E1C               	movwf	lcd_write4@_rs^0,c
  1821  000FEE  0EC2               	movlw	194
  1822  000FF0  ECEB  F00A         	call	_lcd_write4
  1823  000FF4                     
  1824                           ;pwm.c: 124:             lcd_display3(selecao);
  1825  000FF4  5017               	movf	_selecao^0,w,c
  1826  000FF6  EC78  F00A         	call	_lcd_display3
  1827  000FFA                     
  1828                           ;pwm.c: 125:             lcd_write4(0x80+1*0x40+10,0);;
  1829  000FFA  0E00               	movlw	0
  1830  000FFC  6E1C               	movwf	lcd_write4@_rs^0,c
  1831  000FFE  0ECA               	movlw	202
  1832  001000  ECEB  F00A         	call	_lcd_write4
  1833  001004                     
  1834                           ;pwm.c: 126:             lcd_display3(pwm);
  1835  001004  5011               	movf	_pwm^0,w,c
  1836  001006  EC78  F00A         	call	_lcd_display3
  1837  00100A                     
  1838                           ;pwm.c: 127:              if(val == '*'){
  1839  00100A  0E2A               	movlw	42
  1840  00100C  1824               	xorwf	maqTeste@val^0,w,c
  1841  00100E  A4D8               	btfss	status,2,c
  1842  001010  EF0C  F008         	goto	u1031
  1843  001014  EF0E  F008         	goto	u1030
  1844  001018                     u1031:
  1845  001018  EF67  F008         	goto	l297
  1846  00101C                     u1030:
  1847  00101C  EF94  F007         	goto	l1948
  1848  001020                     l1992:
  1849                           
  1850                           ;pwm.c: 135:             val = keyboardScan3();
  1851  001020  EC65  F00B         	call	_keyboardScan3	;wreg free
  1852  001024  6E24               	movwf	maqTeste@val^0,c
  1853  001026                     
  1854                           ;pwm.c: 136:             selecao = 4;
  1855  001026  0E04               	movlw	4
  1856  001028  6E17               	movwf	_selecao^0,c
  1857  00102A                     
  1858                           ;pwm.c: 137:             set_duty(duty4[flag]);
  1859  00102A  B02E               	btfsc	(_flag/(0+8))^0,_flag& (0+7),c
  1860  00102C  EF1A  F008         	goto	u1041
  1861  001030  EF1D  F008         	goto	u1040
  1862  001034                     u1041:
  1863  001034  0E01               	movlw	1
  1864  001036  EF1E  F008         	goto	u1050
  1865  00103A                     u1040:
  1866  00103A  0E00               	movlw	0
  1867  00103C                     u1050:
  1868  00103C  6E22               	movwf	??_maqTeste^0,c
  1869  00103E  6A23               	clrf	(??_maqTeste+1)^0,c
  1870  001040  90D8               	bcf	status,0,c
  1871  001042  3622               	rlcf	??_maqTeste^0,f,c
  1872  001044  3623               	rlcf	(??_maqTeste+1)^0,f,c
  1873  001046  0E01               	movlw	low _duty4
  1874  001048  2422               	addwf	??_maqTeste^0,w,c
  1875  00104A  6ED9               	movwf	fsr2l,c
  1876  00104C  0E00               	movlw	high _duty4
  1877  00104E  2023               	addwfc	(??_maqTeste+1)^0,w,c
  1878  001050  6EDA               	movwf	fsr2h,c
  1879  001052  CFDE F01B          	movff	postinc2,set_duty@val
  1880  001056  CFDD F01C          	movff	postdec2,set_duty@val+1
  1881  00105A  ECD5  F00B         	call	_set_duty	;wreg free
  1882  00105E                     
  1883                           ;pwm.c: 138:             lcd_write4(0x80+1*0x40+2,0);;
  1884  00105E  0E00               	movlw	0
  1885  001060  6E1C               	movwf	lcd_write4@_rs^0,c
  1886  001062  0EC2               	movlw	194
  1887  001064  ECEB  F00A         	call	_lcd_write4
  1888  001068                     
  1889                           ;pwm.c: 139:             lcd_display3(selecao);
  1890  001068  5017               	movf	_selecao^0,w,c
  1891  00106A  EC78  F00A         	call	_lcd_display3
  1892  00106E                     
  1893                           ;pwm.c: 140:             lcd_write4(0x80+1*0x40+10,0);;
  1894  00106E  0E00               	movlw	0
  1895  001070  6E1C               	movwf	lcd_write4@_rs^0,c
  1896  001072  0ECA               	movlw	202
  1897  001074  ECEB  F00A         	call	_lcd_write4
  1898  001078                     
  1899                           ;pwm.c: 141:             lcd_display3(pwm);
  1900  001078  5011               	movf	_pwm^0,w,c
  1901  00107A  EC78  F00A         	call	_lcd_display3
  1902  00107E                     
  1903                           ;pwm.c: 142:              if(val == '*'){
  1904  00107E  0E2A               	movlw	42
  1905  001080  1824               	xorwf	maqTeste@val^0,w,c
  1906  001082  A4D8               	btfss	status,2,c
  1907  001084  EF46  F008         	goto	u1061
  1908  001088  EF48  F008         	goto	u1060
  1909  00108C                     u1061:
  1910  00108C  EF67  F008         	goto	l297
  1911  001090                     u1060:
  1912  001090  EF94  F007         	goto	l1948
  1913  001094                     l2014:
  1914  001094  5016               	movf	_retsak^0,w,c
  1915  001096  6E22               	movwf	??_maqTeste^0,c
  1916  001098  6A23               	clrf	(??_maqTeste+1)^0,c
  1917                           
  1918                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1919                           ; Switch size 1, requested type "simple"
  1920                           ; Number of cases is 1, Range of values is 0 to 0
  1921                           ; switch strategies available:
  1922                           ; Name         Instructions Cycles
  1923                           ; simple_byte            4     3 (average)
  1924                           ;	Chosen strategy is simple_byte
  1925  00109A  5023               	movf	(??_maqTeste+1)^0,w,c
  1926  00109C  0A00               	xorlw	0	; case 0
  1927  00109E  B4D8               	btfsc	status,2,c
  1928  0010A0  EF54  F008         	goto	l2314
  1929  0010A4  EF67  F008         	goto	l297
  1930  0010A8                     l2314:
  1931                           
  1932                           ; Switch size 1, requested type "simple"
  1933                           ; Number of cases is 4, Range of values is 1 to 4
  1934                           ; switch strategies available:
  1935                           ; Name         Instructions Cycles
  1936                           ; simple_byte           13     7 (average)
  1937                           ;	Chosen strategy is simple_byte
  1938  0010A8  5022               	movf	??_maqTeste^0,w,c
  1939  0010AA  0A01               	xorlw	1	; case 1
  1940  0010AC  B4D8               	btfsc	status,2,c
  1941  0010AE  EF5C  F007         	goto	l1932
  1942  0010B2  0A03               	xorlw	3	; case 2
  1943  0010B4  B4D8               	btfsc	status,2,c
  1944  0010B6  EF9C  F007         	goto	l1952
  1945  0010BA  0A01               	xorlw	1	; case 3
  1946  0010BC  B4D8               	btfsc	status,2,c
  1947  0010BE  EFD6  F007         	goto	l1972
  1948  0010C2  0A07               	xorlw	7	; case 4
  1949  0010C4  B4D8               	btfsc	status,2,c
  1950  0010C6  EF10  F008         	goto	l1992
  1951  0010CA  EF67  F008         	goto	l297
  1952  0010CE                     l297:
  1953  0010CE  0012               	return		;funcret
  1954  0010D0                     __end_of_maqTeste:
  1955                           	opt callstack 0
  1956                           
  1957 ;; *************** function _tela0 *****************
  1958 ;; Defined at:
  1959 ;;		line 248 in file "pwm.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0
  1974 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1976 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1977 ;;Total ram usage:        0 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_lcd_string
  1982 ;;		_lcd_write4
  1983 ;; This function is called by:
  1984 ;;		_maqTeste
  1985 ;;		_maqEstados
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text9
  1991  00172E                     __ptext9:
  1992                           	opt callstack 0
  1993  00172E                     _tela0:
  1994                           	opt callstack 24
  1995  00172E                     
  1996                           ;pwm.c: 249:     lcd_string("\fBraco Robotico:\n*-Testar #-Conf");
  1997  00172E  0E01               	movlw	low STR_1
  1998  001730  6E1E               	movwf	lcd_string@ch^0,c
  1999  001732  0E08               	movlw	high STR_1
  2000  001734  6E1F               	movwf	(lcd_string@ch+1)^0,c
  2001  001736  ECEB  F009         	call	_lcd_string	;wreg free
  2002  00173A                     
  2003                           ;pwm.c: 250:     lcd_write4(0b00001100,0);
  2004  00173A  0E00               	movlw	0
  2005  00173C  6E1C               	movwf	lcd_write4@_rs^0,c
  2006  00173E  0E0C               	movlw	12
  2007  001740  ECEB  F00A         	call	_lcd_write4
  2008  001744  0012               	return		;funcret
  2009  001746                     __end_of_tela0:
  2010                           	opt callstack 0
  2011                           
  2012 ;; *************** function _lcd_string *****************
  2013 ;; Defined at:
  2014 ;;		line 122 in file "./lib_lcd.h"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  ch              2    5[COMRAM] PTR const unsigned char 
  2017 ;;		 -> STR_7(31), STR_6(28), STR_5(31), STR_4(31), 
  2018 ;;		 -> STR_3(25), STR_2(32), STR_1(33), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         2       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2032 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        4 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    5
  2037 ;; This function calls:
  2038 ;;		_lcd_write4
  2039 ;; This function is called by:
  2040 ;;		_tela0
  2041 ;;		_tela1
  2042 ;;		_tela2
  2043 ;;		_tela31
  2044 ;;		_tela32
  2045 ;;		_tela4
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text10
  2051  0013D6                     __ptext10:
  2052                           	opt callstack 0
  2053  0013D6                     _lcd_string:
  2054                           	opt callstack 24
  2055  0013D6                     
  2056                           ;./lib_lcd.h: 122: void lcd_string(const char * ch);./lib_lcd.h: 123: {;./lib_lcd.h: 124
      +                          :     while(*ch != 0) {
  2057  0013D6  EF2B  F00A         	goto	l1850
  2058  0013DA                     l1838:
  2059  0013DA  0E00               	movlw	0
  2060  0013DC  6E1C               	movwf	lcd_write4@_rs^0,c
  2061  0013DE  0EC0               	movlw	192
  2062  0013E0  ECEB  F00A         	call	_lcd_write4
  2063  0013E4  EF29  F00A         	goto	l1848
  2064  0013E8                     l1840:
  2065  0013E8  0E00               	movlw	0
  2066  0013EA  6E1C               	movwf	lcd_write4@_rs^0,c
  2067  0013EC  0E01               	movlw	1
  2068  0013EE  ECEB  F00A         	call	_lcd_write4
  2069  0013F2  0E06               	movlw	6
  2070  0013F4  6E20               	movwf	??_lcd_string^0,c
  2071  0013F6  0E30               	movlw	48
  2072  0013F8                     u1327:
  2073  0013F8  2EE8               	decfsz	wreg,f,c
  2074  0013FA  D7FE               	bra	u1327
  2075  0013FC  2E20               	decfsz	??_lcd_string^0,f,c
  2076  0013FE  D7FC               	bra	u1327
  2077  001400  D000               	nop2	
  2078  001402  EF29  F00A         	goto	l1848
  2079  001406                     l1844:
  2080  001406  0E01               	movlw	1
  2081  001408  6E1C               	movwf	lcd_write4@_rs^0,c
  2082  00140A  C01E  FFF6         	movff	lcd_string@ch,tblptrl
  2083  00140E  C01F  FFF7         	movff	lcd_string@ch+1,tblptrh
  2084  001412                     	if	0	;tblptru may be non-zero
  2085  001412                     	endif
  2086  001412                     	if	0	;tblptru may be non-zero
  2087  001412                     	endif
  2088  001412  0008               	tblrd		*
  2089  001414  50F5               	movf	tablat,w,c
  2090  001416  ECEB  F00A         	call	_lcd_write4
  2091                           
  2092                           ;./lib_lcd.h: 129:         }
  2093  00141A  EF29  F00A         	goto	l1848
  2094  00141E                     l1846:
  2095  00141E  C01E  FFF6         	movff	lcd_string@ch,tblptrl
  2096  001422  C01F  FFF7         	movff	lcd_string@ch+1,tblptrh
  2097  001426                     	if	0	;tblptru may be non-zero
  2098  001426                     	endif
  2099  001426                     	if	0	;tblptru may be non-zero
  2100  001426                     	endif
  2101  001426  0008               	tblrd		*
  2102  001428  50F5               	movf	tablat,w,c
  2103  00142A  6E20               	movwf	??_lcd_string^0,c
  2104  00142C  6A21               	clrf	(??_lcd_string+1)^0,c
  2105                           
  2106                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2107                           ; Switch size 1, requested type "simple"
  2108                           ; Number of cases is 1, Range of values is 0 to 0
  2109                           ; switch strategies available:
  2110                           ; Name         Instructions Cycles
  2111                           ; simple_byte            4     3 (average)
  2112                           ;	Chosen strategy is simple_byte
  2113  00142E  5021               	movf	(??_lcd_string+1)^0,w,c
  2114  001430  0A00               	xorlw	0	; case 0
  2115  001432  B4D8               	btfsc	status,2,c
  2116  001434  EF1E  F00A         	goto	l2316
  2117  001438  EF03  F00A         	goto	l1844
  2118  00143C                     l2316:
  2119                           
  2120                           ; Switch size 1, requested type "simple"
  2121                           ; Number of cases is 2, Range of values is 10 to 12
  2122                           ; switch strategies available:
  2123                           ; Name         Instructions Cycles
  2124                           ; simple_byte            7     4 (average)
  2125                           ;	Chosen strategy is simple_byte
  2126  00143C  5020               	movf	??_lcd_string^0,w,c
  2127  00143E  0A0A               	xorlw	10	; case 10
  2128  001440  B4D8               	btfsc	status,2,c
  2129  001442  EFED  F009         	goto	l1838
  2130  001446  0A06               	xorlw	6	; case 12
  2131  001448  B4D8               	btfsc	status,2,c
  2132  00144A  EFF4  F009         	goto	l1840
  2133  00144E  EF03  F00A         	goto	l1844
  2134  001452                     l1848:
  2135                           
  2136                           ;./lib_lcd.h: 130:         ch++;
  2137  001452  4A1E               	infsnz	lcd_string@ch^0,f,c
  2138  001454  2A1F               	incf	(lcd_string@ch+1)^0,f,c
  2139  001456                     l1850:
  2140                           
  2141                           ;./lib_lcd.h: 124:     while(*ch != 0) {
  2142  001456  C01E  FFF6         	movff	lcd_string@ch,tblptrl
  2143  00145A  C01F  FFF7         	movff	lcd_string@ch+1,tblptrh
  2144  00145E                     	if	0	;tblptru may be non-zero
  2145  00145E                     	endif
  2146  00145E                     	if	0	;tblptru may be non-zero
  2147  00145E                     	endif
  2148  00145E  0008               	tblrd		*
  2149  001460  50F5               	movf	tablat,w,c
  2150  001462  0900               	iorlw	0
  2151  001464  A4D8               	btfss	status,2,c
  2152  001466  EF37  F00A         	goto	u921
  2153  00146A  EF39  F00A         	goto	u920
  2154  00146E                     u921:
  2155  00146E  EF0F  F00A         	goto	l1846
  2156  001472                     u920:
  2157  001472  0012               	return		;funcret
  2158  001474                     __end_of_lcd_string:
  2159                           	opt callstack 0
  2160                           
  2161 ;; *************** function _set_duty *****************
  2162 ;; Defined at:
  2163 ;;		line 65 in file "pwm.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  val             2    2[COMRAM] int 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		None
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         2       0       0       0       0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2180 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2181 ;;Total ram usage:        2 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    3
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_maqTeste
  2188 ;;		_maqEstados
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text11
  2193  0017AA                     __ptext11:
  2194                           	opt callstack 0
  2195  0017AA                     _set_duty:
  2196                           	opt callstack 26
  2197  0017AA                     
  2198                           ;pwm.c: 66:     pwm = val;
  2199  0017AA  C01B  F011         	movff	set_duty@val,_pwm
  2200  0017AE  C01C  F012         	movff	set_duty@val+1,_pwm+1
  2201  0017B2  0012               	return		;funcret
  2202  0017B4                     __end_of_set_duty:
  2203                           	opt callstack 0
  2204                           
  2205 ;; *************** function _lcd_display3 *****************
  2206 ;; Defined at:
  2207 ;;		line 148 in file "./lib_lcd.h"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  val             1    wreg     unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  val             1    5[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  1    wreg      void 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0, cstack
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2221 ;;      Params:         0       0       0       0       0       0       0       0       0
  2222 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2224 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2225 ;;Total ram usage:        1 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    5
  2228 ;; This function calls:
  2229 ;;		_lcd_write4
  2230 ;; This function is called by:
  2231 ;;		_maqTeste
  2232 ;;		_tela2
  2233 ;;		_tela31
  2234 ;;		_tela32
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text12
  2239  0014F0                     __ptext12:
  2240                           	opt callstack 0
  2241  0014F0                     _lcd_display3:
  2242                           	opt callstack 23
  2243                           
  2244                           ;incstack = 0
  2245                           ;lcd_display3@val stored from wreg
  2246  0014F0  6E1E               	movwf	lcd_display3@val^0,c
  2247  0014F2                     
  2248                           ;./lib_lcd.h: 148: void lcd_display3(char val);./lib_lcd.h: 149: {;./lib_lcd.h: 150:  st
      +                          atic char cent, dez, un;;./lib_lcd.h: 152:  cent='0';
  2249  0014F2  0E30               	movlw	48
  2250  0014F4  6E3F               	movwf	lcd_display3@cent^0,c
  2251                           
  2252                           ;./lib_lcd.h: 153:  dez='0';
  2253  0014F6  0E30               	movlw	48
  2254  0014F8  6E3E               	movwf	lcd_display3@dez^0,c
  2255                           
  2256                           ;./lib_lcd.h: 154:  while(val>99) { cent++; val-=100; }
  2257  0014FA  EF82  F00A         	goto	l1870
  2258  0014FE                     l1866:
  2259  0014FE  2A3F               	incf	lcd_display3@cent^0,f,c
  2260  001500  0E64               	movlw	100
  2261  001502  5E1E               	subwf	lcd_display3@val^0,f,c
  2262  001504                     l1870:
  2263  001504  0E64               	movlw	100
  2264  001506  601E               	cpfslt	lcd_display3@val^0,c
  2265  001508  EF88  F00A         	goto	u931
  2266  00150C  EF8A  F00A         	goto	u930
  2267  001510                     u931:
  2268  001510  EF7F  F00A         	goto	l1866
  2269  001514                     u930:
  2270  001514  EF8F  F00A         	goto	l1876
  2271  001518                     l1872:
  2272  001518  2A3E               	incf	lcd_display3@dez^0,f,c
  2273  00151A  0E0A               	movlw	10
  2274  00151C  5E1E               	subwf	lcd_display3@val^0,f,c
  2275  00151E                     l1876:
  2276  00151E  0E0A               	movlw	10
  2277  001520  601E               	cpfslt	lcd_display3@val^0,c
  2278  001522  EF95  F00A         	goto	u941
  2279  001526  EF97  F00A         	goto	u940
  2280  00152A                     u941:
  2281  00152A  EF8C  F00A         	goto	l1872
  2282  00152E                     u940:
  2283  00152E                     
  2284                           ;./lib_lcd.h: 156:  un='0'+val;
  2285  00152E  501E               	movf	lcd_display3@val^0,w,c
  2286  001530  0F30               	addlw	48
  2287  001532  6E3D               	movwf	lcd_display3@un^0,c
  2288  001534                     
  2289                           ;./lib_lcd.h: 157:  lcd_write4(cent,1);
  2290  001534  0E01               	movlw	1
  2291  001536  6E1C               	movwf	lcd_write4@_rs^0,c
  2292  001538  503F               	movf	lcd_display3@cent^0,w,c
  2293  00153A  ECEB  F00A         	call	_lcd_write4
  2294  00153E                     
  2295                           ;./lib_lcd.h: 158:  lcd_write4(dez,1);
  2296  00153E  0E01               	movlw	1
  2297  001540  6E1C               	movwf	lcd_write4@_rs^0,c
  2298  001542  503E               	movf	lcd_display3@dez^0,w,c
  2299  001544  ECEB  F00A         	call	_lcd_write4
  2300  001548                     
  2301                           ;./lib_lcd.h: 159:  lcd_write4(un,1);
  2302  001548  0E01               	movlw	1
  2303  00154A  6E1C               	movwf	lcd_write4@_rs^0,c
  2304  00154C  503D               	movf	lcd_display3@un^0,w,c
  2305  00154E  ECEB  F00A         	call	_lcd_write4
  2306  001552  0012               	return		;funcret
  2307  001554                     __end_of_lcd_display3:
  2308                           	opt callstack 0
  2309                           
  2310 ;; *************** function _keyboardScan3 *****************
  2311 ;; Defined at:
  2312 ;;		line 391 in file "./lib_tecladoMatricial.h"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      unsigned char 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2326 ;;      Params:         0       0       0       0       0       0       0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2329 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    4
  2333 ;; This function calls:
  2334 ;;		_keyboardScan2
  2335 ;; This function is called by:
  2336 ;;		_maqTeste
  2337 ;;		_maqEstados
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text13
  2342  0016CA                     __ptext13:
  2343                           	opt callstack 0
  2344  0016CA                     _keyboardScan3:
  2345                           	opt callstack 24
  2346  0016CA                     
  2347                           ;./lib_tecladoMatricial.h: 393:  tecla = 0;
  2348  0016CA  0E00               	movlw	0
  2349  0016CC  6E37               	movwf	_tecla^0,c
  2350  0016CE                     
  2351                           ;./lib_tecladoMatricial.h: 394:  if(flagDeadTime==0) keyboardScan2();
  2352  0016CE  B22E               	btfsc	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2353  0016D0  EF6C  F00B         	goto	u411
  2354  0016D4  EF6E  F00B         	goto	u410
  2355  0016D8                     u411:
  2356  0016D8  EF70  F00B         	goto	l1260
  2357  0016DC                     u410:
  2358  0016DC  EC6B  F004         	call	_keyboardScan2	;wreg free
  2359  0016E0                     l1260:
  2360                           
  2361                           ;./lib_tecladoMatricial.h: 395:  return tecla;
  2362  0016E0  5037               	movf	_tecla^0,w,c
  2363  0016E2  0012               	return		;funcret
  2364  0016E4                     __end_of_keyboardScan3:
  2365                           	opt callstack 0
  2366                           
  2367 ;; *************** function _keyboardScan2 *****************
  2368 ;; Defined at:
  2369 ;;		line 304 in file "./lib_tecladoMatricial.h"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;		None
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;		None
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      unsigned char 
  2376 ;; Registers used:
  2377 ;;		wreg, status,2
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2383 ;;      Params:         0       0       0       0       0       0       0       0       0
  2384 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2385 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2386 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2387 ;;Total ram usage:        1 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    3
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_keyboardScan3
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text14
  2398  0008D6                     __ptext14:
  2399                           	opt callstack 0
  2400  0008D6                     _keyboardScan2:
  2401                           	opt callstack 24
  2402  0008D6                     
  2403                           ;./lib_tecladoMatricial.h: 306:  tecla = 0;
  2404  0008D6  0E00               	movlw	0
  2405  0008D8  6E37               	movwf	_tecla^0,c
  2406  0008DA                     
  2407                           ;./lib_tecladoMatricial.h: 310:  PORTDbits.RD3 = 0;
  2408  0008DA  9683               	bcf	131,3,c	;volatile
  2409  0008DC                     
  2410                           ;./lib_tecladoMatricial.h: 311:  PORTDbits.RD2 = 1;
  2411  0008DC  8483               	bsf	131,2,c	;volatile
  2412  0008DE                     
  2413                           ;./lib_tecladoMatricial.h: 312:  PORTDbits.RD1 = 1;
  2414  0008DE  8283               	bsf	131,1,c	;volatile
  2415  0008E0                     
  2416                           ;./lib_tecladoMatricial.h: 313:  PORTDbits.RD0 = 1;
  2417  0008E0  8083               	bsf	131,0,c	;volatile
  2418                           
  2419                           ;./lib_tecladoMatricial.h: 315:  if (PORTBbits.RB0!=btal1c1) {
  2420  0008E2  B081               	btfsc	129,0,c	;volatile
  2421  0008E4  EF76  F004         	goto	u31
  2422  0008E8  EF7A  F004         	goto	u30
  2423  0008EC                     u31:
  2424  0008EC  6A1B               	clrf	??_keyboardScan2^0,c
  2425  0008EE  2A1B               	incf	??_keyboardScan2^0,f,c
  2426  0008F0  EF7B  F004         	goto	u38
  2427  0008F4                     u30:
  2428  0008F4  6A1B               	clrf	??_keyboardScan2^0,c
  2429  0008F6                     u38:
  2430  0008F6  0E00               	movlw	0
  2431  0008F8  B230               	btfsc	(_btal1c1/(0+8))^0,_btal1c1& (0+7),c
  2432  0008FA  0E01               	movlw	1
  2433  0008FC  181B               	xorwf	??_keyboardScan2^0,w,c
  2434  0008FE  B4D8               	btfsc	status,2,c
  2435  000900  EF84  F004         	goto	u41
  2436  000904  EF86  F004         	goto	u40
  2437  000908                     u41:
  2438  000908  EF95  F004         	goto	l1114
  2439  00090C                     u40:
  2440  00090C                     
  2441                           ;./lib_tecladoMatricial.h: 316:   if (btal1c1==1) { btal1c1=0; tecla='1'; flagDeadTime=1
      +                          ; }
  2442  00090C  A230               	btfss	(_btal1c1/(0+8))^0,_btal1c1& (0+7),c
  2443  00090E  EF8B  F004         	goto	u51
  2444  000912  EF8D  F004         	goto	u50
  2445  000916                     u51:
  2446  000916  EF93  F004         	goto	l210
  2447  00091A                     u50:
  2448  00091A  9230               	bcf	(_btal1c1/(0+8))^0,_btal1c1& (0+7),c
  2449  00091C  0E31               	movlw	49
  2450  00091E  6E37               	movwf	_tecla^0,c
  2451  000920  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2452  000922  EF95  F004         	goto	l1114
  2453  000926                     l210:
  2454  000926  8230               	bsf	(_btal1c1/(0+8))^0,_btal1c1& (0+7),c
  2455  000928  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2456  00092A                     l1114:
  2457                           
  2458                           ;./lib_tecladoMatricial.h: 319:  if (PORTBbits.RB1!=btal1c2) {
  2459  00092A  B281               	btfsc	129,1,c	;volatile
  2460  00092C  EF9A  F004         	goto	u61
  2461  000930  EF9E  F004         	goto	u60
  2462  000934                     u61:
  2463  000934  6A1B               	clrf	??_keyboardScan2^0,c
  2464  000936  2A1B               	incf	??_keyboardScan2^0,f,c
  2465  000938  EF9F  F004         	goto	u68
  2466  00093C                     u60:
  2467  00093C  6A1B               	clrf	??_keyboardScan2^0,c
  2468  00093E                     u68:
  2469  00093E  0E00               	movlw	0
  2470  000940  B030               	btfsc	(_btal1c2/(0+8))^0,_btal1c2& (0+7),c
  2471  000942  0E01               	movlw	1
  2472  000944  181B               	xorwf	??_keyboardScan2^0,w,c
  2473  000946  B4D8               	btfsc	status,2,c
  2474  000948  EFA8  F004         	goto	u71
  2475  00094C  EFAA  F004         	goto	u70
  2476  000950                     u71:
  2477  000950  EFB9  F004         	goto	l1124
  2478  000954                     u70:
  2479  000954                     
  2480                           ;./lib_tecladoMatricial.h: 320:   if (btal1c2==1) { btal1c2=0; tecla='2'; flagDeadTime=1
      +                          ; }
  2481  000954  A030               	btfss	(_btal1c2/(0+8))^0,_btal1c2& (0+7),c
  2482  000956  EFAF  F004         	goto	u81
  2483  00095A  EFB1  F004         	goto	u80
  2484  00095E                     u81:
  2485  00095E  EFB7  F004         	goto	l213
  2486  000962                     u80:
  2487  000962  9030               	bcf	(_btal1c2/(0+8))^0,_btal1c2& (0+7),c
  2488  000964  0E32               	movlw	50
  2489  000966  6E37               	movwf	_tecla^0,c
  2490  000968  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2491  00096A  EFB9  F004         	goto	l1124
  2492  00096E                     l213:
  2493  00096E  8030               	bsf	(_btal1c2/(0+8))^0,_btal1c2& (0+7),c
  2494  000970  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2495  000972                     l1124:
  2496                           
  2497                           ;./lib_tecladoMatricial.h: 323:  if (PORTBbits.RB2!=btal1c3) {
  2498  000972  B481               	btfsc	129,2,c	;volatile
  2499  000974  EFBE  F004         	goto	u91
  2500  000978  EFC2  F004         	goto	u90
  2501  00097C                     u91:
  2502  00097C  6A1B               	clrf	??_keyboardScan2^0,c
  2503  00097E  2A1B               	incf	??_keyboardScan2^0,f,c
  2504  000980  EFC3  F004         	goto	u98
  2505  000984                     u90:
  2506  000984  6A1B               	clrf	??_keyboardScan2^0,c
  2507  000986                     u98:
  2508  000986  0E00               	movlw	0
  2509  000988  BE2F               	btfsc	(_btal1c3/(0+8))^0,_btal1c3& (0+7),c
  2510  00098A  0E01               	movlw	1
  2511  00098C  181B               	xorwf	??_keyboardScan2^0,w,c
  2512  00098E  B4D8               	btfsc	status,2,c
  2513  000990  EFCC  F004         	goto	u101
  2514  000994  EFCE  F004         	goto	u100
  2515  000998                     u101:
  2516  000998  EFDD  F004         	goto	l215
  2517  00099C                     u100:
  2518  00099C                     
  2519                           ;./lib_tecladoMatricial.h: 324:   if (btal1c3==1) { btal1c3=0; tecla='3'; flagDeadTime=1
      +                          ; }
  2520  00099C  AE2F               	btfss	(_btal1c3/(0+8))^0,_btal1c3& (0+7),c
  2521  00099E  EFD3  F004         	goto	u111
  2522  0009A2  EFD5  F004         	goto	u110
  2523  0009A6                     u111:
  2524  0009A6  EFDB  F004         	goto	l216
  2525  0009AA                     u110:
  2526  0009AA  9E2F               	bcf	(_btal1c3/(0+8))^0,_btal1c3& (0+7),c
  2527  0009AC  0E33               	movlw	51
  2528  0009AE  6E37               	movwf	_tecla^0,c
  2529  0009B0  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2530  0009B2  EFDD  F004         	goto	l215
  2531  0009B6                     l216:
  2532  0009B6  8E2F               	bsf	(_btal1c3/(0+8))^0,_btal1c3& (0+7),c
  2533  0009B8  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2534  0009BA                     l215:
  2535                           
  2536                           ;./lib_tecladoMatricial.h: 329:  PORTDbits.RD3 = 1;
  2537  0009BA  8683               	bsf	131,3,c	;volatile
  2538                           
  2539                           ;./lib_tecladoMatricial.h: 330:  PORTDbits.RD2 = 0;
  2540  0009BC  9483               	bcf	131,2,c	;volatile
  2541                           
  2542                           ;./lib_tecladoMatricial.h: 331:  PORTDbits.RD1 = 1;
  2543  0009BE  8283               	bsf	131,1,c	;volatile
  2544                           
  2545                           ;./lib_tecladoMatricial.h: 332:  PORTDbits.RD0 = 1;
  2546  0009C0  8083               	bsf	131,0,c	;volatile
  2547  0009C2                     
  2548                           ;./lib_tecladoMatricial.h: 334:  if (PORTBbits.RB0!=btal2c1) {
  2549  0009C2  B081               	btfsc	129,0,c	;volatile
  2550  0009C4  EFE6  F004         	goto	u121
  2551  0009C8  EFEA  F004         	goto	u120
  2552  0009CC                     u121:
  2553  0009CC  6A1B               	clrf	??_keyboardScan2^0,c
  2554  0009CE  2A1B               	incf	??_keyboardScan2^0,f,c
  2555  0009D0  EFEB  F004         	goto	u128
  2556  0009D4                     u120:
  2557  0009D4  6A1B               	clrf	??_keyboardScan2^0,c
  2558  0009D6                     u128:
  2559  0009D6  0E00               	movlw	0
  2560  0009D8  BA2F               	btfsc	(_btal2c1/(0+8))^0,_btal2c1& (0+7),c
  2561  0009DA  0E01               	movlw	1
  2562  0009DC  181B               	xorwf	??_keyboardScan2^0,w,c
  2563  0009DE  B4D8               	btfsc	status,2,c
  2564  0009E0  EFF4  F004         	goto	u131
  2565  0009E4  EFF6  F004         	goto	u130
  2566  0009E8                     u131:
  2567  0009E8  EF05  F005         	goto	l1144
  2568  0009EC                     u130:
  2569  0009EC                     
  2570                           ;./lib_tecladoMatricial.h: 335:   if (btal2c1==1) { btal2c1=0; tecla='4'; flagDeadTime=1
      +                          ; }
  2571  0009EC  AA2F               	btfss	(_btal2c1/(0+8))^0,_btal2c1& (0+7),c
  2572  0009EE  EFFB  F004         	goto	u141
  2573  0009F2  EFFD  F004         	goto	u140
  2574  0009F6                     u141:
  2575  0009F6  EF03  F005         	goto	l219
  2576  0009FA                     u140:
  2577  0009FA  9A2F               	bcf	(_btal2c1/(0+8))^0,_btal2c1& (0+7),c
  2578  0009FC  0E34               	movlw	52
  2579  0009FE  6E37               	movwf	_tecla^0,c
  2580  000A00  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2581  000A02  EF05  F005         	goto	l1144
  2582  000A06                     l219:
  2583  000A06  8A2F               	bsf	(_btal2c1/(0+8))^0,_btal2c1& (0+7),c
  2584  000A08  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2585  000A0A                     l1144:
  2586                           
  2587                           ;./lib_tecladoMatricial.h: 338:  if (PORTBbits.RB1!=btal2c2) {
  2588  000A0A  B281               	btfsc	129,1,c	;volatile
  2589  000A0C  EF0A  F005         	goto	u151
  2590  000A10  EF0E  F005         	goto	u150
  2591  000A14                     u151:
  2592  000A14  6A1B               	clrf	??_keyboardScan2^0,c
  2593  000A16  2A1B               	incf	??_keyboardScan2^0,f,c
  2594  000A18  EF0F  F005         	goto	u158
  2595  000A1C                     u150:
  2596  000A1C  6A1B               	clrf	??_keyboardScan2^0,c
  2597  000A1E                     u158:
  2598  000A1E  0E00               	movlw	0
  2599  000A20  B82F               	btfsc	(_btal2c2/(0+8))^0,_btal2c2& (0+7),c
  2600  000A22  0E01               	movlw	1
  2601  000A24  181B               	xorwf	??_keyboardScan2^0,w,c
  2602  000A26  B4D8               	btfsc	status,2,c
  2603  000A28  EF18  F005         	goto	u161
  2604  000A2C  EF1A  F005         	goto	u160
  2605  000A30                     u161:
  2606  000A30  EF29  F005         	goto	l1154
  2607  000A34                     u160:
  2608  000A34                     
  2609                           ;./lib_tecladoMatricial.h: 339:   if (btal2c2==1) { btal2c2=0; tecla='5'; flagDeadTime=1
      +                          ; }
  2610  000A34  A82F               	btfss	(_btal2c2/(0+8))^0,_btal2c2& (0+7),c
  2611  000A36  EF1F  F005         	goto	u171
  2612  000A3A  EF21  F005         	goto	u170
  2613  000A3E                     u171:
  2614  000A3E  EF27  F005         	goto	l222
  2615  000A42                     u170:
  2616  000A42  982F               	bcf	(_btal2c2/(0+8))^0,_btal2c2& (0+7),c
  2617  000A44  0E35               	movlw	53
  2618  000A46  6E37               	movwf	_tecla^0,c
  2619  000A48  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2620  000A4A  EF29  F005         	goto	l1154
  2621  000A4E                     l222:
  2622  000A4E  882F               	bsf	(_btal2c2/(0+8))^0,_btal2c2& (0+7),c
  2623  000A50  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2624  000A52                     l1154:
  2625                           
  2626                           ;./lib_tecladoMatricial.h: 342:  if (PORTBbits.RB2!=btal2c3) {
  2627  000A52  B481               	btfsc	129,2,c	;volatile
  2628  000A54  EF2E  F005         	goto	u181
  2629  000A58  EF32  F005         	goto	u180
  2630  000A5C                     u181:
  2631  000A5C  6A1B               	clrf	??_keyboardScan2^0,c
  2632  000A5E  2A1B               	incf	??_keyboardScan2^0,f,c
  2633  000A60  EF33  F005         	goto	u188
  2634  000A64                     u180:
  2635  000A64  6A1B               	clrf	??_keyboardScan2^0,c
  2636  000A66                     u188:
  2637  000A66  0E00               	movlw	0
  2638  000A68  B62F               	btfsc	(_btal2c3/(0+8))^0,_btal2c3& (0+7),c
  2639  000A6A  0E01               	movlw	1
  2640  000A6C  181B               	xorwf	??_keyboardScan2^0,w,c
  2641  000A6E  B4D8               	btfsc	status,2,c
  2642  000A70  EF3C  F005         	goto	u191
  2643  000A74  EF3E  F005         	goto	u190
  2644  000A78                     u191:
  2645  000A78  EF4D  F005         	goto	l224
  2646  000A7C                     u190:
  2647  000A7C                     
  2648                           ;./lib_tecladoMatricial.h: 343:   if (btal2c3==1) { btal2c3=0; tecla='6'; flagDeadTime=1
      +                          ; }
  2649  000A7C  A62F               	btfss	(_btal2c3/(0+8))^0,_btal2c3& (0+7),c
  2650  000A7E  EF43  F005         	goto	u201
  2651  000A82  EF45  F005         	goto	u200
  2652  000A86                     u201:
  2653  000A86  EF4B  F005         	goto	l225
  2654  000A8A                     u200:
  2655  000A8A  962F               	bcf	(_btal2c3/(0+8))^0,_btal2c3& (0+7),c
  2656  000A8C  0E36               	movlw	54
  2657  000A8E  6E37               	movwf	_tecla^0,c
  2658  000A90  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2659  000A92  EF4D  F005         	goto	l224
  2660  000A96                     l225:
  2661  000A96  862F               	bsf	(_btal2c3/(0+8))^0,_btal2c3& (0+7),c
  2662  000A98  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2663  000A9A                     l224:
  2664                           
  2665                           ;./lib_tecladoMatricial.h: 348:  PORTDbits.RD3 = 1;
  2666  000A9A  8683               	bsf	131,3,c	;volatile
  2667                           
  2668                           ;./lib_tecladoMatricial.h: 349:  PORTDbits.RD2 = 1;
  2669  000A9C  8483               	bsf	131,2,c	;volatile
  2670                           
  2671                           ;./lib_tecladoMatricial.h: 350:  PORTDbits.RD1 = 0;
  2672  000A9E  9283               	bcf	131,1,c	;volatile
  2673                           
  2674                           ;./lib_tecladoMatricial.h: 351:  PORTDbits.RD0 = 1;
  2675  000AA0  8083               	bsf	131,0,c	;volatile
  2676  000AA2                     
  2677                           ;./lib_tecladoMatricial.h: 353:  if (PORTBbits.RB0!=btal3c1) {
  2678  000AA2  B081               	btfsc	129,0,c	;volatile
  2679  000AA4  EF56  F005         	goto	u211
  2680  000AA8  EF5A  F005         	goto	u210
  2681  000AAC                     u211:
  2682  000AAC  6A1B               	clrf	??_keyboardScan2^0,c
  2683  000AAE  2A1B               	incf	??_keyboardScan2^0,f,c
  2684  000AB0  EF5B  F005         	goto	u218
  2685  000AB4                     u210:
  2686  000AB4  6A1B               	clrf	??_keyboardScan2^0,c
  2687  000AB6                     u218:
  2688  000AB6  0E00               	movlw	0
  2689  000AB8  B22F               	btfsc	(_btal3c1/(0+8))^0,_btal3c1& (0+7),c
  2690  000ABA  0E01               	movlw	1
  2691  000ABC  181B               	xorwf	??_keyboardScan2^0,w,c
  2692  000ABE  B4D8               	btfsc	status,2,c
  2693  000AC0  EF64  F005         	goto	u221
  2694  000AC4  EF66  F005         	goto	u220
  2695  000AC8                     u221:
  2696  000AC8  EF75  F005         	goto	l1174
  2697  000ACC                     u220:
  2698  000ACC                     
  2699                           ;./lib_tecladoMatricial.h: 354:   if (btal3c1==1) { btal3c1=0; tecla='7'; flagDeadTime=1
      +                          ; }
  2700  000ACC  A22F               	btfss	(_btal3c1/(0+8))^0,_btal3c1& (0+7),c
  2701  000ACE  EF6B  F005         	goto	u231
  2702  000AD2  EF6D  F005         	goto	u230
  2703  000AD6                     u231:
  2704  000AD6  EF73  F005         	goto	l228
  2705  000ADA                     u230:
  2706  000ADA  922F               	bcf	(_btal3c1/(0+8))^0,_btal3c1& (0+7),c
  2707  000ADC  0E37               	movlw	55
  2708  000ADE  6E37               	movwf	_tecla^0,c
  2709  000AE0  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2710  000AE2  EF75  F005         	goto	l1174
  2711  000AE6                     l228:
  2712  000AE6  822F               	bsf	(_btal3c1/(0+8))^0,_btal3c1& (0+7),c
  2713  000AE8  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2714  000AEA                     l1174:
  2715                           
  2716                           ;./lib_tecladoMatricial.h: 357:  if (PORTBbits.RB1!=btal3c2) {
  2717  000AEA  B281               	btfsc	129,1,c	;volatile
  2718  000AEC  EF7A  F005         	goto	u241
  2719  000AF0  EF7E  F005         	goto	u240
  2720  000AF4                     u241:
  2721  000AF4  6A1B               	clrf	??_keyboardScan2^0,c
  2722  000AF6  2A1B               	incf	??_keyboardScan2^0,f,c
  2723  000AF8  EF7F  F005         	goto	u248
  2724  000AFC                     u240:
  2725  000AFC  6A1B               	clrf	??_keyboardScan2^0,c
  2726  000AFE                     u248:
  2727  000AFE  0E00               	movlw	0
  2728  000B00  B02F               	btfsc	(_btal3c2/(0+8))^0,_btal3c2& (0+7),c
  2729  000B02  0E01               	movlw	1
  2730  000B04  181B               	xorwf	??_keyboardScan2^0,w,c
  2731  000B06  B4D8               	btfsc	status,2,c
  2732  000B08  EF88  F005         	goto	u251
  2733  000B0C  EF8A  F005         	goto	u250
  2734  000B10                     u251:
  2735  000B10  EF99  F005         	goto	l1184
  2736  000B14                     u250:
  2737  000B14                     
  2738                           ;./lib_tecladoMatricial.h: 358:   if (btal3c2==1) { btal3c2=0; tecla='8'; flagDeadTime=1
      +                          ; }
  2739  000B14  A02F               	btfss	(_btal3c2/(0+8))^0,_btal3c2& (0+7),c
  2740  000B16  EF8F  F005         	goto	u261
  2741  000B1A  EF91  F005         	goto	u260
  2742  000B1E                     u261:
  2743  000B1E  EF97  F005         	goto	l231
  2744  000B22                     u260:
  2745  000B22  902F               	bcf	(_btal3c2/(0+8))^0,_btal3c2& (0+7),c
  2746  000B24  0E38               	movlw	56
  2747  000B26  6E37               	movwf	_tecla^0,c
  2748  000B28  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2749  000B2A  EF99  F005         	goto	l1184
  2750  000B2E                     l231:
  2751  000B2E  802F               	bsf	(_btal3c2/(0+8))^0,_btal3c2& (0+7),c
  2752  000B30  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2753  000B32                     l1184:
  2754                           
  2755                           ;./lib_tecladoMatricial.h: 361:  if (PORTBbits.RB2!=btal3c3) {
  2756  000B32  B481               	btfsc	129,2,c	;volatile
  2757  000B34  EF9E  F005         	goto	u271
  2758  000B38  EFA2  F005         	goto	u270
  2759  000B3C                     u271:
  2760  000B3C  6A1B               	clrf	??_keyboardScan2^0,c
  2761  000B3E  2A1B               	incf	??_keyboardScan2^0,f,c
  2762  000B40  EFA3  F005         	goto	u278
  2763  000B44                     u270:
  2764  000B44  6A1B               	clrf	??_keyboardScan2^0,c
  2765  000B46                     u278:
  2766  000B46  0E00               	movlw	0
  2767  000B48  BE2E               	btfsc	(_btal3c3/(0+8))^0,_btal3c3& (0+7),c
  2768  000B4A  0E01               	movlw	1
  2769  000B4C  181B               	xorwf	??_keyboardScan2^0,w,c
  2770  000B4E  B4D8               	btfsc	status,2,c
  2771  000B50  EFAC  F005         	goto	u281
  2772  000B54  EFAE  F005         	goto	u280
  2773  000B58                     u281:
  2774  000B58  EFBD  F005         	goto	l233
  2775  000B5C                     u280:
  2776  000B5C                     
  2777                           ;./lib_tecladoMatricial.h: 362:   if (btal3c3==1) { btal3c3=0; tecla='9'; flagDeadTime=1
      +                          ; }
  2778  000B5C  AE2E               	btfss	(_btal3c3/(0+8))^0,_btal3c3& (0+7),c
  2779  000B5E  EFB3  F005         	goto	u291
  2780  000B62  EFB5  F005         	goto	u290
  2781  000B66                     u291:
  2782  000B66  EFBB  F005         	goto	l234
  2783  000B6A                     u290:
  2784  000B6A  9E2E               	bcf	(_btal3c3/(0+8))^0,_btal3c3& (0+7),c
  2785  000B6C  0E39               	movlw	57
  2786  000B6E  6E37               	movwf	_tecla^0,c
  2787  000B70  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2788  000B72  EFBD  F005         	goto	l233
  2789  000B76                     l234:
  2790  000B76  8E2E               	bsf	(_btal3c3/(0+8))^0,_btal3c3& (0+7),c
  2791  000B78  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2792  000B7A                     l233:
  2793                           
  2794                           ;./lib_tecladoMatricial.h: 367:  PORTDbits.RD3 = 1;
  2795  000B7A  8683               	bsf	131,3,c	;volatile
  2796                           
  2797                           ;./lib_tecladoMatricial.h: 368:  PORTDbits.RD2 = 1;
  2798  000B7C  8483               	bsf	131,2,c	;volatile
  2799                           
  2800                           ;./lib_tecladoMatricial.h: 369:  PORTDbits.RD1 = 1;
  2801  000B7E  8283               	bsf	131,1,c	;volatile
  2802                           
  2803                           ;./lib_tecladoMatricial.h: 370:  PORTDbits.RD0 = 0;
  2804  000B80  9083               	bcf	131,0,c	;volatile
  2805  000B82                     
  2806                           ;./lib_tecladoMatricial.h: 372:  if (PORTBbits.RB0!=btal4c1) {
  2807  000B82  B081               	btfsc	129,0,c	;volatile
  2808  000B84  EFC6  F005         	goto	u301
  2809  000B88  EFCA  F005         	goto	u300
  2810  000B8C                     u301:
  2811  000B8C  6A1B               	clrf	??_keyboardScan2^0,c
  2812  000B8E  2A1B               	incf	??_keyboardScan2^0,f,c
  2813  000B90  EFCB  F005         	goto	u308
  2814  000B94                     u300:
  2815  000B94  6A1B               	clrf	??_keyboardScan2^0,c
  2816  000B96                     u308:
  2817  000B96  0E00               	movlw	0
  2818  000B98  BA2E               	btfsc	(_btal4c1/(0+8))^0,_btal4c1& (0+7),c
  2819  000B9A  0E01               	movlw	1
  2820  000B9C  181B               	xorwf	??_keyboardScan2^0,w,c
  2821  000B9E  B4D8               	btfsc	status,2,c
  2822  000BA0  EFD4  F005         	goto	u311
  2823  000BA4  EFD6  F005         	goto	u310
  2824  000BA8                     u311:
  2825  000BA8  EFE5  F005         	goto	l1204
  2826  000BAC                     u310:
  2827  000BAC                     
  2828                           ;./lib_tecladoMatricial.h: 373:   if (btal4c1==1) { btal4c1=0; tecla='*'; flagDeadTime=1
      +                          ; }
  2829  000BAC  AA2E               	btfss	(_btal4c1/(0+8))^0,_btal4c1& (0+7),c
  2830  000BAE  EFDB  F005         	goto	u321
  2831  000BB2  EFDD  F005         	goto	u320
  2832  000BB6                     u321:
  2833  000BB6  EFE3  F005         	goto	l237
  2834  000BBA                     u320:
  2835  000BBA  9A2E               	bcf	(_btal4c1/(0+8))^0,_btal4c1& (0+7),c
  2836  000BBC  0E2A               	movlw	42
  2837  000BBE  6E37               	movwf	_tecla^0,c
  2838  000BC0  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2839  000BC2  EFE5  F005         	goto	l1204
  2840  000BC6                     l237:
  2841  000BC6  8A2E               	bsf	(_btal4c1/(0+8))^0,_btal4c1& (0+7),c
  2842  000BC8  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2843  000BCA                     l1204:
  2844                           
  2845                           ;./lib_tecladoMatricial.h: 376:  if (PORTBbits.RB1!=btal4c2) {
  2846  000BCA  B281               	btfsc	129,1,c	;volatile
  2847  000BCC  EFEA  F005         	goto	u331
  2848  000BD0  EFEE  F005         	goto	u330
  2849  000BD4                     u331:
  2850  000BD4  6A1B               	clrf	??_keyboardScan2^0,c
  2851  000BD6  2A1B               	incf	??_keyboardScan2^0,f,c
  2852  000BD8  EFEF  F005         	goto	u338
  2853  000BDC                     u330:
  2854  000BDC  6A1B               	clrf	??_keyboardScan2^0,c
  2855  000BDE                     u338:
  2856  000BDE  0E00               	movlw	0
  2857  000BE0  B82E               	btfsc	(_btal4c2/(0+8))^0,_btal4c2& (0+7),c
  2858  000BE2  0E01               	movlw	1
  2859  000BE4  181B               	xorwf	??_keyboardScan2^0,w,c
  2860  000BE6  B4D8               	btfsc	status,2,c
  2861  000BE8  EFF8  F005         	goto	u341
  2862  000BEC  EFFA  F005         	goto	u340
  2863  000BF0                     u341:
  2864  000BF0  EF09  F006         	goto	l1214
  2865  000BF4                     u340:
  2866  000BF4                     
  2867                           ;./lib_tecladoMatricial.h: 377:   if (btal4c2==1) { btal4c2=0; tecla='0'; flagDeadTime=1
      +                          ; }
  2868  000BF4  A82E               	btfss	(_btal4c2/(0+8))^0,_btal4c2& (0+7),c
  2869  000BF6  EFFF  F005         	goto	u351
  2870  000BFA  EF01  F006         	goto	u350
  2871  000BFE                     u351:
  2872  000BFE  EF07  F006         	goto	l240
  2873  000C02                     u350:
  2874  000C02  982E               	bcf	(_btal4c2/(0+8))^0,_btal4c2& (0+7),c
  2875  000C04  0E30               	movlw	48
  2876  000C06  6E37               	movwf	_tecla^0,c
  2877  000C08  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2878  000C0A  EF09  F006         	goto	l1214
  2879  000C0E                     l240:
  2880  000C0E  882E               	bsf	(_btal4c2/(0+8))^0,_btal4c2& (0+7),c
  2881  000C10  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2882  000C12                     l1214:
  2883                           
  2884                           ;./lib_tecladoMatricial.h: 380:  if (PORTBbits.RB2!=btal4c3) {
  2885  000C12  B481               	btfsc	129,2,c	;volatile
  2886  000C14  EF0E  F006         	goto	u361
  2887  000C18  EF12  F006         	goto	u360
  2888  000C1C                     u361:
  2889  000C1C  6A1B               	clrf	??_keyboardScan2^0,c
  2890  000C1E  2A1B               	incf	??_keyboardScan2^0,f,c
  2891  000C20  EF13  F006         	goto	u368
  2892  000C24                     u360:
  2893  000C24  6A1B               	clrf	??_keyboardScan2^0,c
  2894  000C26                     u368:
  2895  000C26  0E00               	movlw	0
  2896  000C28  B62E               	btfsc	(_btal4c3/(0+8))^0,_btal4c3& (0+7),c
  2897  000C2A  0E01               	movlw	1
  2898  000C2C  181B               	xorwf	??_keyboardScan2^0,w,c
  2899  000C2E  B4D8               	btfsc	status,2,c
  2900  000C30  EF1C  F006         	goto	u371
  2901  000C34  EF1E  F006         	goto	u370
  2902  000C38                     u371:
  2903  000C38  EF2D  F006         	goto	l245
  2904  000C3C                     u370:
  2905  000C3C                     
  2906                           ;./lib_tecladoMatricial.h: 381:   if (btal4c3==1) { btal4c3=0; tecla='#'; flagDeadTime=1
      +                          ; }
  2907  000C3C  A62E               	btfss	(_btal4c3/(0+8))^0,_btal4c3& (0+7),c
  2908  000C3E  EF23  F006         	goto	u381
  2909  000C42  EF25  F006         	goto	u380
  2910  000C46                     u381:
  2911  000C46  EF2B  F006         	goto	l243
  2912  000C4A                     u380:
  2913  000C4A  962E               	bcf	(_btal4c3/(0+8))^0,_btal4c3& (0+7),c
  2914  000C4C  0E23               	movlw	35
  2915  000C4E  6E37               	movwf	_tecla^0,c
  2916  000C50  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2917  000C52  EF2D  F006         	goto	l245
  2918  000C56                     l243:
  2919  000C56  862E               	bsf	(_btal4c3/(0+8))^0,_btal4c3& (0+7),c
  2920  000C58  822E               	bsf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  2921  000C5A                     l245:
  2922  000C5A  0012               	return		;funcret
  2923  000C5C                     __end_of_keyboardScan2:
  2924                           	opt callstack 0
  2925                           
  2926 ;; *************** function _isr_AD *****************
  2927 ;; Defined at:
  2928 ;;		line 63 in file "./lib_adc.h"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  2    4[COMRAM] int 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2942 ;;      Params:         2       0       0       0       0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2945 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2946 ;;Total ram usage:        2 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    4
  2949 ;; This function calls:
  2950 ;;		_adc_read
  2951 ;; This function is called by:
  2952 ;;		_maqEstados
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text15
  2957  0016E4                     __ptext15:
  2958                           	opt callstack 0
  2959  0016E4                     _isr_AD:
  2960                           	opt callstack 25
  2961  0016E4                     
  2962                           ;./lib_adc.h: 64:  PIR1bits.ADIF = 0;
  2963  0016E4  9C9E               	bcf	158,6,c	;volatile
  2964  0016E6                     
  2965                           ;./lib_adc.h: 65:  adcval = adc_read();
  2966  0016E6  ECA3  F00B         	call	_adc_read	;wreg free
  2967  0016EA  C01B  F035         	movff	?_adc_read,_adcval
  2968  0016EE  C01C  F036         	movff	?_adc_read+1,_adcval+1
  2969  0016F2                     
  2970                           ;./lib_adc.h: 67:  ADCON0bits.GODONE = 1;
  2971  0016F2  82C2               	bsf	194,1,c	;volatile
  2972  0016F4                     
  2973                           ;./lib_adc.h: 68:     return adcval;
  2974  0016F4  C035  F01D         	movff	_adcval,?_isr_AD
  2975  0016F8  C036  F01E         	movff	_adcval+1,?_isr_AD+1
  2976  0016FC  0012               	return		;funcret
  2977  0016FE                     __end_of_isr_AD:
  2978                           	opt callstack 0
  2979                           
  2980 ;; *************** function _adc_read *****************
  2981 ;; Defined at:
  2982 ;;		line 50 in file "./lib_adc.h"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  2    2[COMRAM] int 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2996 ;;      Params:         2       0       0       0       0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2999 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3000 ;;Total ram usage:        2 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    3
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_isr_AD
  3007 ;;		_adc_conversion
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text16
  3012  001746                     __ptext16:
  3013                           	opt callstack 0
  3014  001746                     _adc_read:
  3015                           	opt callstack 25
  3016  001746                     
  3017                           ;./lib_adc.h: 51:  static int result;;./lib_adc.h: 52:  result = ADRESH << 8;
  3018  001746  50C4               	movf	196,w,c	;volatile
  3019  001748  6E34               	movwf	(adc_read@result+1)^0,c
  3020  00174A  6A33               	clrf	adc_read@result^0,c
  3021  00174C                     
  3022                           ;./lib_adc.h: 53:  result += ADRESL;
  3023  00174C  50C3               	movf	195,w,c	;volatile
  3024  00174E  2633               	addwf	adc_read@result^0,f,c
  3025  001750  0E00               	movlw	0
  3026  001752  2234               	addwfc	(adc_read@result+1)^0,f,c
  3027  001754                     
  3028                           ;./lib_adc.h: 54:  return result;
  3029  001754  C033  F01B         	movff	adc_read@result,?_adc_read
  3030  001758  C034  F01C         	movff	adc_read@result+1,?_adc_read+1
  3031  00175C  0012               	return		;funcret
  3032  00175E                     __end_of_adc_read:
  3033                           	opt callstack 0
  3034                           
  3035 ;; *************** function ___awdiv *****************
  3036 ;; Defined at:
  3037 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  dividend        2    6[COMRAM] int 
  3040 ;;  divisor         2    8[COMRAM] int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  quotient        2   12[COMRAM] int 
  3043 ;;  sign            1   11[COMRAM] unsigned char 
  3044 ;;  counter         1   10[COMRAM] unsigned char 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  2    6[COMRAM] int 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3054 ;;      Params:         4       0       0       0       0       0       0       0       0
  3055 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3057 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3058 ;;Total ram usage:        8 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    3
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_maqEstados
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text17
  3069  001260                     __ptext17:
  3070                           	opt callstack 0
  3071  001260                     ___awdiv:
  3072                           	opt callstack 26
  3073  001260  0E00               	movlw	0
  3074  001262  6E24               	movwf	___awdiv@sign^0,c
  3075  001264  BE22               	btfsc	(___awdiv@divisor+1)^0,7,c
  3076  001266  EF39  F009         	goto	u1070
  3077  00126A  EF37  F009         	goto	u1071
  3078  00126E                     u1071:
  3079  00126E  EF3F  F009         	goto	l2052
  3080  001272                     u1070:
  3081  001272  6C21               	negf	___awdiv@divisor^0,c
  3082  001274  1E22               	comf	(___awdiv@divisor+1)^0,f,c
  3083  001276  B0D8               	btfsc	status,0,c
  3084  001278  2A22               	incf	(___awdiv@divisor+1)^0,f,c
  3085  00127A  0E01               	movlw	1
  3086  00127C  6E24               	movwf	___awdiv@sign^0,c
  3087  00127E                     l2052:
  3088  00127E  BE20               	btfsc	(___awdiv@dividend+1)^0,7,c
  3089  001280  EF46  F009         	goto	u1080
  3090  001284  EF44  F009         	goto	u1081
  3091  001288                     u1081:
  3092  001288  EF4C  F009         	goto	l2058
  3093  00128C                     u1080:
  3094  00128C  6C1F               	negf	___awdiv@dividend^0,c
  3095  00128E  1E20               	comf	(___awdiv@dividend+1)^0,f,c
  3096  001290  B0D8               	btfsc	status,0,c
  3097  001292  2A20               	incf	(___awdiv@dividend+1)^0,f,c
  3098  001294  0E01               	movlw	1
  3099  001296  1A24               	xorwf	___awdiv@sign^0,f,c
  3100  001298                     l2058:
  3101  001298  0E00               	movlw	0
  3102  00129A  6E26               	movwf	(___awdiv@quotient+1)^0,c
  3103  00129C  0E00               	movlw	0
  3104  00129E  6E25               	movwf	___awdiv@quotient^0,c
  3105  0012A0  5021               	movf	___awdiv@divisor^0,w,c
  3106  0012A2  1022               	iorwf	(___awdiv@divisor+1)^0,w,c
  3107  0012A4  B4D8               	btfsc	status,2,c
  3108  0012A6  EF57  F009         	goto	u1091
  3109  0012AA  EF59  F009         	goto	u1090
  3110  0012AE                     u1091:
  3111  0012AE  EF81  F009         	goto	l2080
  3112  0012B2                     u1090:
  3113  0012B2  0E01               	movlw	1
  3114  0012B4  6E23               	movwf	___awdiv@counter^0,c
  3115  0012B6  EF61  F009         	goto	l2066
  3116  0012BA                     l2064:
  3117  0012BA  90D8               	bcf	status,0,c
  3118  0012BC  3621               	rlcf	___awdiv@divisor^0,f,c
  3119  0012BE  3622               	rlcf	(___awdiv@divisor+1)^0,f,c
  3120  0012C0  2A23               	incf	___awdiv@counter^0,f,c
  3121  0012C2                     l2066:
  3122  0012C2  AE22               	btfss	(___awdiv@divisor+1)^0,7,c
  3123  0012C4  EF66  F009         	goto	u1101
  3124  0012C8  EF68  F009         	goto	u1100
  3125  0012CC                     u1101:
  3126  0012CC  EF5D  F009         	goto	l2064
  3127  0012D0                     u1100:
  3128  0012D0                     l2068:
  3129  0012D0  90D8               	bcf	status,0,c
  3130  0012D2  3625               	rlcf	___awdiv@quotient^0,f,c
  3131  0012D4  3626               	rlcf	(___awdiv@quotient+1)^0,f,c
  3132  0012D6  5021               	movf	___awdiv@divisor^0,w,c
  3133  0012D8  5C1F               	subwf	___awdiv@dividend^0,w,c
  3134  0012DA  5022               	movf	(___awdiv@divisor+1)^0,w,c
  3135  0012DC  5820               	subwfb	(___awdiv@dividend+1)^0,w,c
  3136  0012DE  A0D8               	btfss	status,0,c
  3137  0012E0  EF74  F009         	goto	u1111
  3138  0012E4  EF76  F009         	goto	u1110
  3139  0012E8                     u1111:
  3140  0012E8  EF7B  F009         	goto	l2076
  3141  0012EC                     u1110:
  3142  0012EC  5021               	movf	___awdiv@divisor^0,w,c
  3143  0012EE  5E1F               	subwf	___awdiv@dividend^0,f,c
  3144  0012F0  5022               	movf	(___awdiv@divisor+1)^0,w,c
  3145  0012F2  5A20               	subwfb	(___awdiv@dividend+1)^0,f,c
  3146  0012F4  8025               	bsf	___awdiv@quotient^0,0,c
  3147  0012F6                     l2076:
  3148  0012F6  90D8               	bcf	status,0,c
  3149  0012F8  3222               	rrcf	(___awdiv@divisor+1)^0,f,c
  3150  0012FA  3221               	rrcf	___awdiv@divisor^0,f,c
  3151  0012FC  2E23               	decfsz	___awdiv@counter^0,f,c
  3152  0012FE  EF68  F009         	goto	l2068
  3153  001302                     l2080:
  3154  001302  5024               	movf	___awdiv@sign^0,w,c
  3155  001304  B4D8               	btfsc	status,2,c
  3156  001306  EF87  F009         	goto	u1121
  3157  00130A  EF89  F009         	goto	u1120
  3158  00130E                     u1121:
  3159  00130E  EF8D  F009         	goto	l2084
  3160  001312                     u1120:
  3161  001312  6C25               	negf	___awdiv@quotient^0,c
  3162  001314  1E26               	comf	(___awdiv@quotient+1)^0,f,c
  3163  001316  B0D8               	btfsc	status,0,c
  3164  001318  2A26               	incf	(___awdiv@quotient+1)^0,f,c
  3165  00131A                     l2084:
  3166  00131A  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  3167  00131E  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  3168  001322  0012               	return		;funcret
  3169  001324                     __end_of___awdiv:
  3170                           	opt callstack 0
  3171                           
  3172 ;; *************** function _init *****************
  3173 ;; Defined at:
  3174 ;;		line 53 in file "pwm.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3188 ;;      Params:         0       0       0       0       0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    6
  3195 ;; This function calls:
  3196 ;;		_adc_init
  3197 ;;		_init_lcd
  3198 ;;		_init_matrixKeyboard
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text18
  3205  001690                     __ptext18:
  3206                           	opt callstack 0
  3207  001690                     _init:
  3208                           	opt callstack 24
  3209  001690                     
  3210                           ;pwm.c: 54:     init_lcd();
  3211  001690  EC3A  F00A         	call	_init_lcd	;wreg free
  3212  001694                     
  3213                           ;pwm.c: 55:     adc_init();
  3214  001694  EC05  F00B         	call	_adc_init	;wreg free
  3215  001698                     
  3216                           ;pwm.c: 56:     init_matrixKeyboard();
  3217  001698  ECBB  F00B         	call	_init_matrixKeyboard	;wreg free
  3218  00169C                     
  3219                           ;pwm.c: 57:     T0CON = 0b11000110;
  3220  00169C  0EC6               	movlw	198
  3221  00169E  6ED5               	movwf	213,c	;volatile
  3222  0016A0                     
  3223                           ;pwm.c: 59:     INTCON = 0b11100000;
  3224  0016A0  0EE0               	movlw	224
  3225  0016A2  6EF2               	movwf	242,c	;volatile
  3226  0016A4                     
  3227                           ;pwm.c: 60:     TRISB = 0b11100111;
  3228  0016A4  0EE7               	movlw	231
  3229  0016A6  6E93               	movwf	147,c	;volatile
  3230  0016A8                     
  3231                           ;pwm.c: 61:     TRISA = 0b11110011;
  3232  0016A8  0EF3               	movlw	243
  3233  0016AA  6E92               	movwf	146,c	;volatile
  3234  0016AC  0012               	return		;funcret
  3235  0016AE                     __end_of_init:
  3236                           	opt callstack 0
  3237                           
  3238 ;; *************** function _init_matrixKeyboard *****************
  3239 ;; Defined at:
  3240 ;;		line 37 in file "./lib_tecladoMatricial.h"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0
  3255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3258 ;;Total ram usage:        0 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    3
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_init
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text19
  3269  001776                     __ptext19:
  3270                           	opt callstack 0
  3271  001776                     _init_matrixKeyboard:
  3272                           	opt callstack 26
  3273  001776                     
  3274                           ;./lib_tecladoMatricial.h: 38:     INTCON2bits.RBPU = 0;
  3275  001776  9EF1               	bcf	241,7,c	;volatile
  3276  001778                     
  3277                           ;./lib_tecladoMatricial.h: 39:     ADCON1 = 0x0f;
  3278  001778  0E0F               	movlw	15
  3279  00177A  6EC1               	movwf	193,c	;volatile
  3280  00177C                     
  3281                           ;./lib_tecladoMatricial.h: 47:     TRISBbits.RB0 = 1;
  3282  00177C  8093               	bsf	147,0,c	;volatile
  3283  00177E                     
  3284                           ;./lib_tecladoMatricial.h: 48:     TRISBbits.RB1 = 1;
  3285  00177E  8293               	bsf	147,1,c	;volatile
  3286  001780                     
  3287                           ;./lib_tecladoMatricial.h: 49:     TRISBbits.RB2 = 1;
  3288  001780  8493               	bsf	147,2,c	;volatile
  3289  001782                     
  3290                           ;./lib_tecladoMatricial.h: 50:     TRISDbits.RD0 = 0;
  3291  001782  9095               	bcf	149,0,c	;volatile
  3292  001784                     
  3293                           ;./lib_tecladoMatricial.h: 51:     TRISDbits.RD1 = 0;
  3294  001784  9295               	bcf	149,1,c	;volatile
  3295  001786                     
  3296                           ;./lib_tecladoMatricial.h: 52:     TRISDbits.RD2 = 0;
  3297  001786  9495               	bcf	149,2,c	;volatile
  3298  001788                     
  3299                           ;./lib_tecladoMatricial.h: 53:     TRISDbits.RD3 = 0;
  3300  001788  9695               	bcf	149,3,c	;volatile
  3301  00178A  0012               	return		;funcret
  3302  00178C                     __end_of_init_matrixKeyboard:
  3303                           	opt callstack 0
  3304                           
  3305 ;; *************** function _init_lcd *****************
  3306 ;; Defined at:
  3307 ;;		line 84 in file "./lib_lcd.h"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3321 ;;      Params:         0       0       0       0       0       0       0       0       0
  3322 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3323 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3324 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3325 ;;Total ram usage:        1 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    5
  3328 ;; This function calls:
  3329 ;;		_lcd_write4
  3330 ;;		_lcd_writeNibble
  3331 ;; This function is called by:
  3332 ;;		_init
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text20
  3337  001474                     __ptext20:
  3338                           	opt callstack 0
  3339  001474                     _init_lcd:
  3340                           	opt callstack 24
  3341  001474                     
  3342                           ;./lib_lcd.h: 87:     TRISD = 0x00;
  3343  001474  0E00               	movlw	0
  3344  001476  6E95               	movwf	149,c	;volatile
  3345                           
  3346                           ;./lib_lcd.h: 88:     TRISE = 0x00;
  3347  001478  0E00               	movlw	0
  3348  00147A  6E96               	movwf	150,c	;volatile
  3349  00147C                     
  3350                           ;./lib_lcd.h: 90:  PORTEbits.RE1 = 0;
  3351  00147C  9284               	bcf	132,1,c	;volatile
  3352  00147E                     
  3353                           ;./lib_lcd.h: 91:  PORTEbits.RE2 = 0;
  3354  00147E  9484               	bcf	132,2,c	;volatile
  3355  001480                     
  3356                           ;./lib_lcd.h: 92:  _delay((unsigned long)((50)*(8000000/4000.0)));
  3357  001480  0E82               	movlw	130
  3358  001482  6E1E               	movwf	??_init_lcd^0,c
  3359  001484  0EDE               	movlw	222
  3360  001486                     u1337:
  3361  001486  2EE8               	decfsz	wreg,f,c
  3362  001488  D7FE               	bra	u1337
  3363  00148A  2E1E               	decfsz	??_init_lcd^0,f,c
  3364  00148C  D7FC               	bra	u1337
  3365  00148E                     
  3366                           ;./lib_lcd.h: 93:  PORTEbits.RE1 = 1;
  3367  00148E  8284               	bsf	132,1,c	;volatile
  3368  001490                     
  3369                           ;./lib_lcd.h: 101:  lcd_writeNibble(0b00100000);
  3370  001490  0E20               	movlw	32
  3371  001492  ECC6  F00B         	call	_lcd_writeNibble
  3372  001496                     
  3373                           ;./lib_lcd.h: 102:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3374  001496  0E0D               	movlw	13
  3375  001498  6E1E               	movwf	??_init_lcd^0,c
  3376  00149A  0EFC               	movlw	252
  3377  00149C                     u1347:
  3378  00149C  2EE8               	decfsz	wreg,f,c
  3379  00149E  D7FE               	bra	u1347
  3380  0014A0  2E1E               	decfsz	??_init_lcd^0,f,c
  3381  0014A2  D7FC               	bra	u1347
  3382  0014A4                     
  3383                           ;./lib_lcd.h: 103:  lcd_write4(0b00101000,0);
  3384  0014A4  0E00               	movlw	0
  3385  0014A6  6E1C               	movwf	lcd_write4@_rs^0,c
  3386  0014A8  0E28               	movlw	40
  3387  0014AA  ECEB  F00A         	call	_lcd_write4
  3388  0014AE                     
  3389                           ;./lib_lcd.h: 104:  _delay((unsigned long)((1)*(8000000/4000.0)));
  3390  0014AE  0E03               	movlw	3
  3391  0014B0  6E1E               	movwf	??_init_lcd^0,c
  3392  0014B2  0E98               	movlw	152
  3393  0014B4                     u1357:
  3394  0014B4  2EE8               	decfsz	wreg,f,c
  3395  0014B6  D7FE               	bra	u1357
  3396  0014B8  2E1E               	decfsz	??_init_lcd^0,f,c
  3397  0014BA  D7FC               	bra	u1357
  3398  0014BC                     
  3399                           ;./lib_lcd.h: 105:  lcd_write4(0b00101000,0);
  3400  0014BC  0E00               	movlw	0
  3401  0014BE  6E1C               	movwf	lcd_write4@_rs^0,c
  3402  0014C0  0E28               	movlw	40
  3403  0014C2  ECEB  F00A         	call	_lcd_write4
  3404  0014C6                     
  3405                           ;./lib_lcd.h: 107:  lcd_write4(0b00001000,0);
  3406  0014C6  0E00               	movlw	0
  3407  0014C8  6E1C               	movwf	lcd_write4@_rs^0,c
  3408  0014CA  0E08               	movlw	8
  3409  0014CC  ECEB  F00A         	call	_lcd_write4
  3410  0014D0                     
  3411                           ;./lib_lcd.h: 108:  lcd_write4(0b00001111,0);
  3412  0014D0  0E00               	movlw	0
  3413  0014D2  6E1C               	movwf	lcd_write4@_rs^0,c
  3414  0014D4  0E0F               	movlw	15
  3415  0014D6  ECEB  F00A         	call	_lcd_write4
  3416  0014DA                     
  3417                           ;./lib_lcd.h: 109:  lcd_write4(0b00000001,0);
  3418  0014DA  0E00               	movlw	0
  3419  0014DC  6E1C               	movwf	lcd_write4@_rs^0,c
  3420  0014DE  0E01               	movlw	1
  3421  0014E0  ECEB  F00A         	call	_lcd_write4
  3422  0014E4                     
  3423                           ;./lib_lcd.h: 110:  lcd_write4(0b00000110,0);
  3424  0014E4  0E00               	movlw	0
  3425  0014E6  6E1C               	movwf	lcd_write4@_rs^0,c
  3426  0014E8  0E06               	movlw	6
  3427  0014EA  ECEB  F00A         	call	_lcd_write4
  3428  0014EE  0012               	return		;funcret
  3429  0014F0                     __end_of_init_lcd:
  3430                           	opt callstack 0
  3431                           
  3432 ;; *************** function _lcd_write4 *****************
  3433 ;; Defined at:
  3434 ;;		line 61 in file "./lib_lcd.h"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  ch              1    wreg     unsigned char 
  3437 ;;  _rs             1    3[COMRAM] unsigned char 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  ch              1    4[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3449 ;;      Params:         1       0       0       0       0       0       0       0       0
  3450 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3452 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    4
  3456 ;; This function calls:
  3457 ;;		_lcd_writeNibble
  3458 ;; This function is called by:
  3459 ;;		_init_lcd
  3460 ;;		_lcd_string
  3461 ;;		_lcd_display3
  3462 ;;		_maqTeste
  3463 ;;		_tela0
  3464 ;;		_tela1
  3465 ;;		_tela2
  3466 ;;		_tela31
  3467 ;;		_tela32
  3468 ;;		_main
  3469 ;;		_lcd_coord
  3470 ;;		_lcd_display5
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text21
  3475  0015D6                     __ptext21:
  3476                           	opt callstack 0
  3477  0015D6                     _lcd_write4:
  3478                           	opt callstack 25
  3479                           
  3480                           ;incstack = 0
  3481                           ;lcd_write4@ch stored from wreg
  3482  0015D6  6E1D               	movwf	lcd_write4@ch^0,c
  3483  0015D8                     
  3484                           ;./lib_lcd.h: 61: void lcd_write4 (char ch, char _rs);./lib_lcd.h: 62: {;./lib_lcd.h: 63
      +                          :  if(_rs) PORTEbits.RE2 = 1; else PORTEbits.RE2 = 0;
  3485  0015D8  501C               	movf	lcd_write4@_rs^0,w,c
  3486  0015DA  B4D8               	btfsc	status,2,c
  3487  0015DC  EFF2  F00A         	goto	u911
  3488  0015E0  EFF4  F00A         	goto	u910
  3489  0015E4                     u911:
  3490  0015E4  EFF7  F00A         	goto	l101
  3491  0015E8                     u910:
  3492  0015E8  8484               	bsf	132,2,c	;volatile
  3493  0015EA  EFF8  F00A         	goto	l1832
  3494  0015EE                     l101:
  3495  0015EE  9484               	bcf	132,2,c	;volatile
  3496  0015F0                     l1832:
  3497                           
  3498                           ;./lib_lcd.h: 64:  lcd_writeNibble (ch & 0xf0);
  3499  0015F0  501D               	movf	lcd_write4@ch^0,w,c
  3500  0015F2  0BF0               	andlw	240
  3501  0015F4  ECC6  F00B         	call	_lcd_writeNibble
  3502                           
  3503                           ;./lib_lcd.h: 65:  lcd_writeNibble (ch << 4);
  3504  0015F8  381D               	swapf	lcd_write4@ch^0,w,c
  3505  0015FA  0BF0               	andlw	240
  3506  0015FC  ECC6  F00B         	call	_lcd_writeNibble
  3507  001600                     
  3508                           ;./lib_lcd.h: 66:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3509  001600  0E21               	movlw	33
  3510  001602                     u1367:
  3511  001602  2EE8               	decfsz	wreg,f,c
  3512  001604  D7FE               	bra	u1367
  3513  001606  F000               	nop	
  3514  001608  0012               	return		;funcret
  3515  00160A                     __end_of_lcd_write4:
  3516                           	opt callstack 0
  3517                           
  3518 ;; *************** function _lcd_writeNibble *****************
  3519 ;; Defined at:
  3520 ;;		line 50 in file "./lib_lcd.h"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  ch              1    wreg     unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  ch              1    2[COMRAM] unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0
  3535 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3537 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3538 ;;Total ram usage:        1 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    3
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_lcd_write4
  3545 ;;		_init_lcd
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text22
  3550  00178C                     __ptext22:
  3551                           	opt callstack 0
  3552  00178C                     _lcd_writeNibble:
  3553                           	opt callstack 25
  3554                           
  3555                           ;incstack = 0
  3556                           ;lcd_writeNibble@ch stored from wreg
  3557  00178C  6E1B               	movwf	lcd_writeNibble@ch^0,c
  3558  00178E                     
  3559                           ;./lib_lcd.h: 50: void lcd_writeNibble (char ch);./lib_lcd.h: 51: {;./lib_lcd.h: 53:  PO
      +                          RTD = ch;
  3560  00178E  C01B  FF83         	movff	lcd_writeNibble@ch,3971	;volatile
  3561  001792                     
  3562                           ;./lib_lcd.h: 54:  _delay((unsigned long)((1)*(8000000/4000000.0)));
  3563  001792  D000               	nop2		;2 cycle nop
  3564  001794                     
  3565                           ;./lib_lcd.h: 55:  PORTEbits.RE1 = 0;
  3566  001794  9284               	bcf	132,1,c	;volatile
  3567  001796                     
  3568                           ;./lib_lcd.h: 56:  _delay((unsigned long)((1)*(8000000/4000000.0)));
  3569  001796  D000               	nop2		;2 cycle nop
  3570  001798                     
  3571                           ;./lib_lcd.h: 57:  PORTEbits.RE1 = 1;
  3572  001798  8284               	bsf	132,1,c	;volatile
  3573  00179A  0012               	return		;funcret
  3574  00179C                     __end_of_lcd_writeNibble:
  3575                           	opt callstack 0
  3576                           
  3577 ;; *************** function _adc_init *****************
  3578 ;; Defined at:
  3579 ;;		line 15 in file "./lib_adc.h"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    3
  3600 ;; This function calls:
  3601 ;;		Nothing
  3602 ;; This function is called by:
  3603 ;;		_init
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text23
  3608  00160A                     __ptext23:
  3609                           	opt callstack 0
  3610  00160A                     _adc_init:
  3611                           	opt callstack 26
  3612  00160A                     
  3613                           ;./lib_adc.h: 16:     ADCON0bits.ADON = 1;
  3614  00160A  80C2               	bsf	194,0,c	;volatile
  3615  00160C                     
  3616                           ;./lib_adc.h: 17:     ADCON0bits.CHS = 1;
  3617  00160C  50C2               	movf	194,w,c	;volatile
  3618  00160E  0BC3               	andlw	-61
  3619  001610  0904               	iorlw	4
  3620  001612  6EC2               	movwf	194,c	;volatile
  3621  001614                     
  3622                           ;./lib_adc.h: 18:     ADCON0bits.GODONE = 0;
  3623  001614  92C2               	bcf	194,1,c	;volatile
  3624                           
  3625                           ;./lib_adc.h: 20:     ADCON1bits.PCFG = 0b1110;
  3626  001616  50C1               	movf	193,w,c	;volatile
  3627  001618  0BF0               	andlw	-16
  3628  00161A  090E               	iorlw	14
  3629  00161C  6EC1               	movwf	193,c	;volatile
  3630  00161E                     
  3631                           ;./lib_adc.h: 21:     ADCON1bits.VCFG0 = 0;
  3632  00161E  98C1               	bcf	193,4,c	;volatile
  3633  001620                     
  3634                           ;./lib_adc.h: 22:     ADCON1bits.VCFG1 = 0;
  3635  001620  9AC1               	bcf	193,5,c	;volatile
  3636                           
  3637                           ;./lib_adc.h: 24:     ADCON2bits.ACQT = 1;
  3638  001622  50C0               	movf	192,w,c	;volatile
  3639  001624  0BC7               	andlw	-57
  3640  001626  0908               	iorlw	8
  3641  001628  6EC0               	movwf	192,c	;volatile
  3642                           
  3643                           ;./lib_adc.h: 25:     ADCON2bits.ADCS = 1;
  3644  00162A  50C0               	movf	192,w,c	;volatile
  3645  00162C  0BF8               	andlw	-8
  3646  00162E  0901               	iorlw	1
  3647  001630  6EC0               	movwf	192,c	;volatile
  3648  001632                     
  3649                           ;./lib_adc.h: 26:     ADCON2bits.ADFM = 1;
  3650  001632  8EC0               	bsf	192,7,c	;volatile
  3651  001634  0012               	return		;funcret
  3652  001636                     __end_of_adc_init:
  3653                           	opt callstack 0
  3654                           
  3655 ;; *************** function _isrH *****************
  3656 ;; Defined at:
  3657 ;;		line 280 in file "pwm.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3671 ;;      Params:         0       0       0       0       0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3674 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3675 ;;Total ram usage:        0 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    2
  3678 ;; This function calls:
  3679 ;;		_isr_Timer0
  3680 ;; This function is called by:
  3681 ;;		Interrupt level 2
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	intcode
  3686  000008                     __pintcode:
  3687                           	opt callstack 0
  3688  000008                     _isrH:
  3689                           	opt callstack 22
  3690                           
  3691                           ;incstack = 0
  3692  000008  8240               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3693  00000A  EDAF  F00B         	call	int_func,f	;refresh shadow registers
  3694                           
  3695                           	psect	intcode_body
  3696  00175E                     __pintcode_body:
  3697                           	opt callstack 22
  3698  00175E                     int_func:
  3699                           	opt callstack 22
  3700  00175E  0006               	pop		; remove dummy address from shadow register refresh
  3701  001760                     
  3702                           ;pwm.c: 281:     if(INTCONbits.TMR0IF == 1) isr_Timer0();
  3703  001760  A4F2               	btfss	242,2,c	;volatile
  3704  001762  EFB5  F00B         	goto	i2u90_41
  3705  001766  EFB7  F00B         	goto	i2u90_40
  3706  00176A                     i2u90_41:
  3707  00176A  EFB9  F00B         	goto	i2l345
  3708  00176E                     i2u90_40:
  3709  00176E  EC68  F008         	call	_isr_Timer0	;wreg free
  3710  001772                     i2l345:
  3711  001772  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3712  001774  0011               	retfie		f
  3713  001776                     __end_of_isrH:
  3714                           	opt callstack 0
  3715                           
  3716 ;; *************** function _isr_Timer0 *****************
  3717 ;; Defined at:
  3718 ;;		line 284 in file "pwm.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3732 ;;      Params:         0       0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3734 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3735 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        2 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    1
  3739 ;; This function calls:
  3740 ;;		_deadTime_isr
  3741 ;; This function is called by:
  3742 ;;		_isrH
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text25
  3747  0010D0                     __ptext25:
  3748                           	opt callstack 0
  3749  0010D0                     _isr_Timer0:
  3750                           	opt callstack 22
  3751  0010D0                     
  3752                           ;pwm.c: 285:     INTCONbits.TMR0IF = 0;
  3753  0010D0  94F2               	bcf	242,2,c	;volatile
  3754  0010D2                     
  3755                           ;pwm.c: 286:     static char cont = 63;;pwm.c: 287:     static char cont2 = 8;;pwm.c: 28
      +                          8:     deadTime_isr();
  3756  0010D2  EC57  F00B         	call	_deadTime_isr	;wreg free
  3757  0010D6                     
  3758                           ;pwm.c: 289:     if(--cont==0){
  3759  0010D6  2E14               	decfsz	isr_Timer0@cont^0,f,c
  3760  0010D8  EF12  F009         	goto	i2l1722
  3761  0010DC                     
  3762                           ;pwm.c: 290:         if(cont2 == 8) retsak = 1;
  3763  0010DC  0E08               	movlw	8
  3764  0010DE  1813               	xorwf	isr_Timer0@cont2^0,w,c
  3765  0010E0  A4D8               	btfss	status,2,c
  3766  0010E2  EF75  F008         	goto	i2u74_41
  3767  0010E6  EF77  F008         	goto	i2u74_40
  3768  0010EA                     i2u74_41:
  3769  0010EA  EF79  F008         	goto	i2l1676
  3770  0010EE                     i2u74_40:
  3771  0010EE  0E01               	movlw	1
  3772  0010F0  6E16               	movwf	_retsak^0,c
  3773  0010F2                     i2l1676:
  3774                           
  3775                           ;pwm.c: 291:         if(cont2 == 6) retsak = 2;
  3776  0010F2  0E06               	movlw	6
  3777  0010F4  1813               	xorwf	isr_Timer0@cont2^0,w,c
  3778  0010F6  A4D8               	btfss	status,2,c
  3779  0010F8  EF80  F008         	goto	i2u75_41
  3780  0010FC  EF82  F008         	goto	i2u75_40
  3781  001100                     i2u75_41:
  3782  001100  EF84  F008         	goto	i2l1680
  3783  001104                     i2u75_40:
  3784  001104  0E02               	movlw	2
  3785  001106  6E16               	movwf	_retsak^0,c
  3786  001108                     i2l1680:
  3787                           
  3788                           ;pwm.c: 292:         if(cont2 == 4) retsak = 3;
  3789  001108  0E04               	movlw	4
  3790  00110A  1813               	xorwf	isr_Timer0@cont2^0,w,c
  3791  00110C  A4D8               	btfss	status,2,c
  3792  00110E  EF8B  F008         	goto	i2u76_41
  3793  001112  EF8D  F008         	goto	i2u76_40
  3794  001116                     i2u76_41:
  3795  001116  EF8F  F008         	goto	i2l1684
  3796  00111A                     i2u76_40:
  3797  00111A  0E03               	movlw	3
  3798  00111C  6E16               	movwf	_retsak^0,c
  3799  00111E                     i2l1684:
  3800                           
  3801                           ;pwm.c: 293:         if(cont2 == 2) retsak = 4;
  3802  00111E  0E02               	movlw	2
  3803  001120  1813               	xorwf	isr_Timer0@cont2^0,w,c
  3804  001122  A4D8               	btfss	status,2,c
  3805  001124  EF96  F008         	goto	i2u77_41
  3806  001128  EF98  F008         	goto	i2u77_40
  3807  00112C                     i2u77_41:
  3808  00112C  EF9A  F008         	goto	i2l1688
  3809  001130                     i2u77_40:
  3810  001130  0E04               	movlw	4
  3811  001132  6E16               	movwf	_retsak^0,c
  3812  001134                     i2l1688:
  3813                           
  3814                           ;pwm.c: 294:         if(--cont2==0){
  3815  001134  2E13               	decfsz	isr_Timer0@cont2^0,f,c
  3816  001136  EF9F  F008         	goto	i2l357
  3817  00113A                     
  3818                           ;pwm.c: 295:             cont2 = 8;
  3819  00113A  0E08               	movlw	8
  3820  00113C  6E13               	movwf	isr_Timer0@cont2^0,c
  3821  00113E                     i2l357:
  3822                           
  3823                           ;pwm.c: 297:         cont = 63;
  3824  00113E  0E3F               	movlw	63
  3825  001140  6E14               	movwf	isr_Timer0@cont^0,c
  3826  001142                     
  3827                           ;pwm.c: 298:         if(flag == 1)
  3828  001142  A02E               	btfss	(_flag/(0+8))^0,_flag& (0+7),c
  3829  001144  EFA6  F008         	goto	i2u78_41
  3830  001148  EFA8  F008         	goto	i2u78_40
  3831  00114C                     i2u78_41:
  3832  00114C  EFAB  F008         	goto	i2l358
  3833  001150                     i2u78_40:
  3834  001150                     
  3835                           ;pwm.c: 299:             {;pwm.c: 300:                flag = 0;
  3836  001150  902E               	bcf	(_flag/(0+8))^0,_flag& (0+7),c
  3837                           
  3838                           ;pwm.c: 301:             }
  3839  001152  EF12  F009         	goto	i2l1722
  3840  001156                     i2l358:
  3841                           
  3842                           ;pwm.c: 303:             {;pwm.c: 304:                flag = 1;
  3843  001156  802E               	bsf	(_flag/(0+8))^0,_flag& (0+7),c
  3844  001158  EF12  F009         	goto	i2l1722
  3845  00115C                     i2l361:
  3846                           
  3847                           ;pwm.c: 309:             if(PORTBbits.RB3)
  3848  00115C  A681               	btfss	129,3,c	;volatile
  3849  00115E  EFB3  F008         	goto	i2u79_41
  3850  001162  EFB5  F008         	goto	i2u79_40
  3851  001166                     i2u79_41:
  3852  001166  EFBC  F008         	goto	i2l1698
  3853  00116A                     i2u79_40:
  3854  00116A                     
  3855                           ;pwm.c: 310:             {;pwm.c: 311:                 TMR0 = pwm;
  3856  00116A  C011  FFD6         	movff	_pwm,4054	;volatile
  3857  00116E  C012  FFD7         	movff	_pwm+1,4055	;volatile
  3858                           
  3859                           ;pwm.c: 312:                 PORTBbits.RB3 = 0x00;
  3860  001172  9681               	bcf	129,3,c	;volatile
  3861                           
  3862                           ;pwm.c: 314:             }
  3863  001174  EF2F  F009         	goto	i2l374
  3864  001178                     i2l1698:
  3865                           
  3866                           ;pwm.c: 316:             {;pwm.c: 318:                 TMR0 = (255 - pwm);
  3867  001178  5011               	movf	_pwm^0,w,c
  3868  00117A  08FF               	sublw	255
  3869  00117C  6ED6               	movwf	214,c	;volatile
  3870  00117E  5012               	movf	(_pwm+1)^0,w,c
  3871  001180  A0D8               	btfss	status,0,c
  3872  001182  2AE8               	incf	wreg,f,c
  3873  001184  0800               	sublw	0
  3874  001186  6ED7               	movwf	215,c	;volatile
  3875  001188                     
  3876                           ;pwm.c: 319:                 PORTBbits.RB3 = 0x01;
  3877  001188  8681               	bsf	129,3,c	;volatile
  3878  00118A  EF2F  F009         	goto	i2l374
  3879  00118E                     i2l365:
  3880                           
  3881                           ;pwm.c: 325:             if(PORTBbits.RB4)
  3882  00118E  A881               	btfss	129,4,c	;volatile
  3883  001190  EFCC  F008         	goto	i2u80_41
  3884  001194  EFCE  F008         	goto	i2u80_40
  3885  001198                     i2u80_41:
  3886  001198  EFD5  F008         	goto	i2l1704
  3887  00119C                     i2u80_40:
  3888  00119C                     
  3889                           ;pwm.c: 326:             {;pwm.c: 327:                 TMR0 = pwm;
  3890  00119C  C011  FFD6         	movff	_pwm,4054	;volatile
  3891  0011A0  C012  FFD7         	movff	_pwm+1,4055	;volatile
  3892                           
  3893                           ;pwm.c: 328:                 PORTBbits.RB4 = 0x00;
  3894  0011A4  9881               	bcf	129,4,c	;volatile
  3895                           
  3896                           ;pwm.c: 329:             }
  3897  0011A6  EF2F  F009         	goto	i2l374
  3898  0011AA                     i2l1704:
  3899                           
  3900                           ;pwm.c: 331:             {;pwm.c: 333:                 TMR0 = (255 - pwm);
  3901  0011AA  5011               	movf	_pwm^0,w,c
  3902  0011AC  08FF               	sublw	255
  3903  0011AE  6ED6               	movwf	214,c	;volatile
  3904  0011B0  5012               	movf	(_pwm+1)^0,w,c
  3905  0011B2  A0D8               	btfss	status,0,c
  3906  0011B4  2AE8               	incf	wreg,f,c
  3907  0011B6  0800               	sublw	0
  3908  0011B8  6ED7               	movwf	215,c	;volatile
  3909  0011BA                     
  3910                           ;pwm.c: 334:                 PORTBbits.RB4 = 0x01;
  3911  0011BA  8881               	bsf	129,4,c	;volatile
  3912  0011BC  EF2F  F009         	goto	i2l374
  3913  0011C0                     i2l368:
  3914                           
  3915                           ;pwm.c: 339:             if(PORTAbits.AN2)
  3916  0011C0  A480               	btfss	128,2,c	;volatile
  3917  0011C2  EFE5  F008         	goto	i2u81_41
  3918  0011C6  EFE7  F008         	goto	i2u81_40
  3919  0011CA                     i2u81_41:
  3920  0011CA  EFEE  F008         	goto	i2l1710
  3921  0011CE                     i2u81_40:
  3922  0011CE                     
  3923                           ;pwm.c: 340:             {;pwm.c: 341:                 TMR0 = pwm;
  3924  0011CE  C011  FFD6         	movff	_pwm,4054	;volatile
  3925  0011D2  C012  FFD7         	movff	_pwm+1,4055	;volatile
  3926                           
  3927                           ;pwm.c: 342:                 PORTAbits.AN2 = 0x00;
  3928  0011D6  9480               	bcf	128,2,c	;volatile
  3929                           
  3930                           ;pwm.c: 343:             }
  3931  0011D8  EF2F  F009         	goto	i2l374
  3932  0011DC                     i2l1710:
  3933                           
  3934                           ;pwm.c: 345:             {;pwm.c: 347:                 TMR0 = (255 - pwm);
  3935  0011DC  5011               	movf	_pwm^0,w,c
  3936  0011DE  08FF               	sublw	255
  3937  0011E0  6ED6               	movwf	214,c	;volatile
  3938  0011E2  5012               	movf	(_pwm+1)^0,w,c
  3939  0011E4  A0D8               	btfss	status,0,c
  3940  0011E6  2AE8               	incf	wreg,f,c
  3941  0011E8  0800               	sublw	0
  3942  0011EA  6ED7               	movwf	215,c	;volatile
  3943  0011EC                     
  3944                           ;pwm.c: 348:                 PORTAbits.AN2 = 0x01;
  3945  0011EC  8480               	bsf	128,2,c	;volatile
  3946  0011EE  EF2F  F009         	goto	i2l374
  3947  0011F2                     i2l371:
  3948                           
  3949                           ;pwm.c: 353:             if(PORTAbits.AN3)
  3950  0011F2  A680               	btfss	128,3,c	;volatile
  3951  0011F4  EFFE  F008         	goto	i2u82_41
  3952  0011F8  EF00  F009         	goto	i2u82_40
  3953  0011FC                     i2u82_41:
  3954  0011FC  EF07  F009         	goto	i2l1716
  3955  001200                     i2u82_40:
  3956  001200                     
  3957                           ;pwm.c: 354:             {;pwm.c: 355:                 TMR0 = pwm;
  3958  001200  C011  FFD6         	movff	_pwm,4054	;volatile
  3959  001204  C012  FFD7         	movff	_pwm+1,4055	;volatile
  3960                           
  3961                           ;pwm.c: 356:                 PORTAbits.AN3 = 0x00;
  3962  001208  9680               	bcf	128,3,c	;volatile
  3963                           
  3964                           ;pwm.c: 357:             }
  3965  00120A  EF2F  F009         	goto	i2l374
  3966  00120E                     i2l1716:
  3967                           
  3968                           ;pwm.c: 359:             {;pwm.c: 361:                 TMR0 = (255 - pwm);
  3969  00120E  5011               	movf	_pwm^0,w,c
  3970  001210  08FF               	sublw	255
  3971  001212  6ED6               	movwf	214,c	;volatile
  3972  001214  5012               	movf	(_pwm+1)^0,w,c
  3973  001216  A0D8               	btfss	status,0,c
  3974  001218  2AE8               	incf	wreg,f,c
  3975  00121A  0800               	sublw	0
  3976  00121C  6ED7               	movwf	215,c	;volatile
  3977  00121E                     
  3978                           ;pwm.c: 362:                 PORTAbits.AN3 = 0x01;
  3979  00121E  8680               	bsf	128,3,c	;volatile
  3980  001220  EF2F  F009         	goto	i2l374
  3981  001224                     i2l1722:
  3982  001224  5017               	movf	_selecao^0,w,c
  3983  001226  6E19               	movwf	??_isr_Timer0^0,c
  3984  001228  6A1A               	clrf	(??_isr_Timer0+1)^0,c
  3985                           
  3986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3987                           ; Switch size 1, requested type "simple"
  3988                           ; Number of cases is 1, Range of values is 0 to 0
  3989                           ; switch strategies available:
  3990                           ; Name         Instructions Cycles
  3991                           ; simple_byte            4     3 (average)
  3992                           ;	Chosen strategy is simple_byte
  3993  00122A  501A               	movf	(??_isr_Timer0+1)^0,w,c
  3994  00122C  0A00               	xorlw	0	; case 0
  3995  00122E  B4D8               	btfsc	status,2,c
  3996  001230  EF1C  F009         	goto	i2l2318
  3997  001234  EF2F  F009         	goto	i2l374
  3998  001238                     i2l2318:
  3999                           
  4000                           ; Switch size 1, requested type "simple"
  4001                           ; Number of cases is 4, Range of values is 1 to 4
  4002                           ; switch strategies available:
  4003                           ; Name         Instructions Cycles
  4004                           ; simple_byte           13     7 (average)
  4005                           ;	Chosen strategy is simple_byte
  4006  001238  5019               	movf	??_isr_Timer0^0,w,c
  4007  00123A  0A01               	xorlw	1	; case 1
  4008  00123C  B4D8               	btfsc	status,2,c
  4009  00123E  EFAE  F008         	goto	i2l361
  4010  001242  0A03               	xorlw	3	; case 2
  4011  001244  B4D8               	btfsc	status,2,c
  4012  001246  EFC7  F008         	goto	i2l365
  4013  00124A  0A01               	xorlw	1	; case 3
  4014  00124C  B4D8               	btfsc	status,2,c
  4015  00124E  EFE0  F008         	goto	i2l368
  4016  001252  0A07               	xorlw	7	; case 4
  4017  001254  B4D8               	btfsc	status,2,c
  4018  001256  EFF9  F008         	goto	i2l371
  4019  00125A  EF2F  F009         	goto	i2l374
  4020  00125E                     i2l374:
  4021  00125E  0012               	return		;funcret
  4022  001260                     __end_of_isr_Timer0:
  4023                           	opt callstack 0
  4024                           
  4025 ;; *************** function _deadTime_isr *****************
  4026 ;; Defined at:
  4027 ;;		line 80 in file "./lib_tecladoMatricial.h"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4044 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_isr_Timer0
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text26
  4055  0016AE                     __ptext26:
  4056                           	opt callstack 0
  4057  0016AE                     _deadTime_isr:
  4058                           	opt callstack 22
  4059  0016AE                     
  4060                           ;./lib_tecladoMatricial.h: 82:  if(flagDeadTime)
  4061  0016AE  A22E               	btfss	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  4062  0016B0  EF5C  F00B         	goto	i2u42_41
  4063  0016B4  EF5E  F00B         	goto	i2u42_40
  4064  0016B8                     i2u42_41:
  4065  0016B8  EF64  F00B         	goto	i2l206
  4066  0016BC                     i2u42_40:
  4067  0016BC                     
  4068                           ;./lib_tecladoMatricial.h: 83:   if(--contDeadTime==0) {
  4069  0016BC  2E18               	decfsz	_contDeadTime^0,f,c
  4070  0016BE  EF64  F00B         	goto	i2l206
  4071  0016C2                     
  4072                           ;./lib_tecladoMatricial.h: 84:    contDeadTime=1;
  4073  0016C2  0E01               	movlw	1
  4074  0016C4  6E18               	movwf	_contDeadTime^0,c
  4075  0016C6                     
  4076                           ;./lib_tecladoMatricial.h: 85:    flagDeadTime=0;
  4077  0016C6  922E               	bcf	(_flagDeadTime/(0+8))^0,_flagDeadTime& (0+7),c
  4078  0016C8                     i2l206:
  4079  0016C8  0012               	return		;funcret
  4080  0016CA                     __end_of_deadTime_isr:
  4081                           	opt callstack 0
  4082                           
  4083                           	psect	rparam
  4084  0000                     
  4085                           	psect	temp
  4086  000040                     btemp:
  4087                           	opt callstack 0
  4088  000040                     	ds	1
  4089  0000                     int$flags	set	btemp
  4090  0000                     wtemp8	set	btemp+1
  4091  0000                     ttemp5	set	btemp+1
  4092  0000                     ttemp6	set	btemp+4
  4093  0000                     ttemp7	set	btemp+8
  4094                           tosu	equ	0xFFF
  4095                           tosh	equ	0xFFE
  4096                           tosl	equ	0xFFD
  4097                           stkptr	equ	0xFFC
  4098                           pclatu	equ	0xFFB
  4099                           pclath	equ	0xFFA
  4100                           pcl	equ	0xFF9
  4101                           tblptru	equ	0xFF8
  4102                           tblptrh	equ	0xFF7
  4103                           tblptrl	equ	0xFF6
  4104                           tablat	equ	0xFF5
  4105                           prodh	equ	0xFF4
  4106                           prodl	equ	0xFF3
  4107                           indf0	equ	0xFEF
  4108                           postinc0	equ	0xFEE
  4109                           postdec0	equ	0xFED
  4110                           preinc0	equ	0xFEC
  4111                           plusw0	equ	0xFEB
  4112                           fsr0h	equ	0xFEA
  4113                           fsr0l	equ	0xFE9
  4114                           wreg	equ	0xFE8
  4115                           indf1	equ	0xFE7
  4116                           postinc1	equ	0xFE6
  4117                           postdec1	equ	0xFE5
  4118                           preinc1	equ	0xFE4
  4119                           plusw1	equ	0xFE3
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           bsr	equ	0xFE0
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           preinc2	equ	0xFDC
  4127                           plusw2	equ	0xFDB
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8


Data Sizes:
    Strings     211
    Constant    0
    Data        24
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     21      63
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_string@ch	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_7(CODE[31]), STR_6(CODE[28]), STR_5(CODE[31]), STR_4(CODE[31]), 
		 -> STR_3(CODE[25]), STR_2(CODE[32]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_maqEstados
    _maqEstados->___awdiv
    _tela4->_lcd_string
    _tela32->_lcd_string
    _tela31->_lcd_string
    _tela2->_lcd_string
    _tela1->_lcd_string
    _tela0->_lcd_string
    _lcd_string->_lcd_write4
    _lcd_display3->_lcd_write4
    _keyboardScan3->_keyboardScan2
    _isr_AD->_adc_read
    ___awdiv->_isr_AD
    _init->_init_lcd
    _init_lcd->_lcd_write4
    _lcd_write4->_lcd_writeNibble

Critical Paths under _isrH in COMRAM

    _isrH->_isr_Timer0

Critical Paths under _main in BANK0

    None.

Critical Paths under _isrH in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isrH in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isrH in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isrH in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isrH in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isrH in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isrH in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isrH in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   65506
                                             19 COMRAM     2     2      0
                               _init
                         _lcd_string
                         _lcd_write4
                         _maqEstados
                              _tela0
 ---------------------------------------------------------------------------------
 (1) _maqEstados                                           5     5      0   51728
                                             14 COMRAM     5     5      0
                            ___awdiv
                             _isr_AD
                      _keyboardScan3
                           _maqTeste
                      _selecaoServos
                           _set_duty
                              _tela0
                              _tela1
                              _tela2
                             _tela31
                             _tela32
                              _tela4
 ---------------------------------------------------------------------------------
 (2) _tela4                                                0     0      0    3112
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _tela32                                               0     0      0    8206
                       _lcd_display3
                         _lcd_string
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _tela31                                               0     0      0    8206
                       _lcd_display3
                         _lcd_string
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _tela2                                                0     0      0    8206
                       _lcd_display3
                         _lcd_string
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _tela1                                                0     0      0    5625
                         _lcd_string
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _selecaoServos                                        3     3      0      60
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _maqTeste                                             3     3      0   11366
                                              9 COMRAM     3     3      0
                      _keyboardScan3
                       _lcd_display3
                         _lcd_write4
                           _set_duty
                              _tela0
 ---------------------------------------------------------------------------------
 (1) _tela0                                                0     0      0    5625
                         _lcd_string
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           4     2      2    3112
                                              5 COMRAM     4     2      2
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (2) _set_duty                                             2     0      2     554
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _lcd_display3                                         1     1      0    2581
                                              5 COMRAM     1     1      0
                         _lcd_write4
 ---------------------------------------------------------------------------------
 (3) _keyboardScan3                                        0     0      0       0
                      _keyboardScan2
 ---------------------------------------------------------------------------------
 (4) _keyboardScan2                                        1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isr_AD                                               2     0      2       0
                                              4 COMRAM     2     0      2
                           _adc_read
 ---------------------------------------------------------------------------------
 (3) _adc_read                                             2     0      2       0
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              6 COMRAM     8     4      4
                             _isr_AD (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    2528
                           _adc_init
                           _init_lcd
                _init_matrixKeyboard
 ---------------------------------------------------------------------------------
 (2) _init_matrixKeyboard                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_lcd                                             1     1      0    2528
                                              5 COMRAM     1     1      0
                         _lcd_write4
                    _lcd_writeNibble
 ---------------------------------------------------------------------------------
 (2) _lcd_write4                                           2     1      1    2513
                                              3 COMRAM     2     1      1
                    _lcd_writeNibble
 ---------------------------------------------------------------------------------
 (3) _lcd_writeNibble                                      1     1      0      15
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isrH                                                 0     0      0       0
                         _isr_Timer0
 ---------------------------------------------------------------------------------
 (8) _isr_Timer0                                           2     2      0       0
                                              0 COMRAM     2     2      0
                       _deadTime_isr
 ---------------------------------------------------------------------------------
 (9) _deadTime_isr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _adc_init
     _init_lcd
       _lcd_write4
         _lcd_writeNibble
       _lcd_writeNibble
     _init_matrixKeyboard
   _lcd_string
     _lcd_write4
       _lcd_writeNibble
   _lcd_write4
     _lcd_writeNibble
   _maqEstados
     ___awdiv
       _isr_AD (ARG)
         _adc_read
     _isr_AD
       _adc_read
     _keyboardScan3
       _keyboardScan2
     _maqTeste
       _keyboardScan3
         _keyboardScan2
       _lcd_display3
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
       _set_duty
       _tela0
         _lcd_string
           _lcd_write4
             _lcd_writeNibble
         _lcd_write4
           _lcd_writeNibble
     _selecaoServos
     _set_duty
     _tela0
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
     _tela1
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
     _tela2
       _lcd_display3
         _lcd_write4
           _lcd_writeNibble
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
     _tela31
       _lcd_display3
         _lcd_write4
           _lcd_writeNibble
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
     _tela32
       _lcd_display3
         _lcd_write4
           _lcd_writeNibble
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
       _lcd_write4
         _lcd_writeNibble
     _tela4
       _lcd_string
         _lcd_write4
           _lcd_writeNibble
   _tela0
     _lcd_string
       _lcd_write4
         _lcd_writeNibble
     _lcd_write4
       _lcd_writeNibble

 _isrH (ROOT)
   _isr_Timer0
     _deadTime_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       3       0        3.2%
COMRAM              5E     15      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      20        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Sep 10 10:48:22 2019

                          l73 1634                            l81 175C                            l90 16FC  
                          l98 179A                            u30 08F4                            u31 08EC  
                          u40 090C                            u41 0908                            u50 091A  
                          u51 0916                            u60 093C                            u61 0934  
                          u70 0954                            u38 08F6                            u71 0950  
                          u80 0962                            u81 095E                            u90 0984  
                          u91 097C                            u68 093E                            u98 0986  
                ___awdiv@sign 0024                   __CFG_BOR$ON 000000                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l101 15EE                           l103 1608  
                         l201 178A                           l106 14EE                           l210 0926  
                         l213 096E                           l117 1472                           l222 0A4E  
                         l231 0B2E                           l215 09BA                           l135 1552  
                         l240 0C0E                           l224 0A9A                           l216 09B6  
                         l233 0B7A                           l225 0A96                           l321 0EB2  
                         l234 0B76                           l330 168E                           l243 0C56  
                         l219 0A06                           l228 0AE6                           l324 1744  
                         l245 0C5A                           l237 0BC6                           l333 1670  
                         l327 172C                           l272 16AC                           l336 1652  
                         l249 16E2                           l275 17B2                           l339 17A8  
                         l284 13D4                           l616 1322                           l297 10CE  
                __CFG_CPB$OFF 000000                           u100 099C                           u101 0998  
                         u110 09AA                           u111 09A6                           u200 0A8A  
                         u120 09D4                           u201 0A86                           u121 09CC  
                         u210 0AB4                           u130 09EC                           u211 0AAC  
                         u131 09E8                           u300 0B94                           u220 0ACC  
                         u140 09FA                           u301 0B8C                           u221 0AC8  
                         u141 09F6                           u310 0BAC                           u230 0ADA  
                         u150 0A1C                           u311 0BA8                           u231 0AD6  
                         u151 0A14                           u320 0BBA                           u240 0AFC  
                         u160 0A34                           u128 09D6                           u321 0BB6  
                         u241 0AF4                           u161 0A30                           u330 0BDC  
                         u250 0B14                           u218 0AB6                           u170 0A42  
                         u410 16DC                           u331 0BD4                           u251 0B10  
                         u171 0A3E                           u411 16D8                           u340 0BF4  
                         u308 0B96                           u260 0B22                           u180 0A64  
                         u341 0BF0                           u261 0B1E                           u181 0A5C  
                         u350 0C02                           u270 0B44                           u190 0A7C  
                         u158 0A1E                           u351 0BFE                           u271 0B3C  
                         u191 0A78                           u360 0C24                           u280 0B5C  
                         u248 0AFE                           u361 0C1C                           u281 0B58  
                         u370 0C3C                           u338 0BDE                           u290 0B6A  
                __CFG_CPD$OFF 000000                           u371 0C38                           u291 0B66  
                         u380 0C4A                           u188 0A66                           u381 0C46  
                         u278 0B46                           u368 0C26                           u910 15E8  
                         u911 15E4                           u920 1472                           u921 146E  
                         u930 1514                           u931 1510                           u940 152E  
                         u941 152A                           u950 0ED2                           u951 0ECC  
                         u960 0ED4                           u970 0F28                           u971 0F24  
                         u980 0F52                           u981 0F4C                           u990 0F54  
        ?_init_matrixKeyboard 0019                           _pwm 0011                           prod 000FF3  
                         wreg 000FE8                  __CFG_FOSC$HS 000000                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l1100 08DC                          l1110 091C  
                        l1102 08DE                          l1200 0BBC                          l1120 0964  
                        l1112 0920                          l1104 08E0                          l2000 1068  
                        l1210 0C04                          l1202 0BC0                          l1130 09AC  
                        l1122 0968                          l1106 090C                          l1114 092A  
                        l2002 106E                          l1060 1792                          l2100 16A8  
                        l1220 0C4C                          l1212 0C08                          l1204 0BCA  
                        l1140 09FC                          l1132 09B0                          l1116 0954  
                        l1124 0972                          l1108 091A                          l2004 1078  
                        l2020 1716                          l1062 1794                          l1222 0C50  
                        l1206 0BF4                          l1214 0C12                          l1150 0A44  
                        l1142 0A00                          l1134 09C2                          l1126 099C  
                        l1118 0962                          l2006 107E                          l2014 1094  
                        l2022 1722                          l2030 1688                          l2110 0C80  
                        l2102 0C5C                          l1064 1796                          l1320 1776  
                        l1216 0C3C                          l1208 0C02                          l1160 0A8C  
                        l1152 0A48                          l1136 09EC                          l1144 0A0A  
                        l1128 09AA                          l2032 1654                          l2040 1642  
                        l2024 179C                          l2200 0E30                          l2120 0CA8  
                        l2112 0C84                          l2104 0C64                          l1066 1798  
                        l1058 178E                          l1330 1782                          l1322 1778  
                        l2050 127A                          l1218 0C4A                          l1170 0ADC  
                        l1162 0A90                          l1146 0A34                          l1154 0A52  
                        l1138 09FA                          l2026 1672                          l2034 1660  
                        l2042 164C                          l2202 0E34                          l2210 0E4A  
                        l2130 0CE0                          l2122 0CBA                          l2114 0C96  
                        l2106 0C6A                          l1332 1784                          l1324 177C  
                        l2060 12A0                          l2052 127E                          l2044 1260  
                        l1180 0B24                          l1172 0AE0                          l1164 0AA2  
                        l1156 0A7C                          l1148 0A42                          l1260 16E0  
                        l2028 167E                          l2036 166A                          l2204 0E3A  
                        l2140 0D14                          l2132 0CE4                          l2124 0CC2  
                        l2116 0C9A                          l2108 0C7C                          l1270 160A  
                        l1334 1786                          l1326 177E                          l2070 12D6  
                        l2062 12B2                          l2054 128C                          l2046 1264  
                        l1190 0B6C                          l1182 0B28                          l1166 0ACC  
                        l1174 0AEA                          l1158 0A8A                          l1254 16CA  
                        l1350 1346                          l2038 1636                          l2310 0E7C  
                        l2222 0E60                          l2206 0E42                          l2150 0D3E  
                        l2142 0D1C                          l2134 0CF6                          l2126 0CC6  
                        l2118 0CA2                          l1280 1632                          l1272 160C  
                        l1336 1788                          l1328 1780                          l2072 12EC  
                        l2064 12BA                          l2080 1302                          l2056 1294  
                        l2048 1272                          l1192 0B70                          l1176 0B14  
                        l1184 0B32                          l1168 0ADA                          l1096 08D6  
                        l1256 16CE                          l2312 13AE                          l1352 1362  
                        l2208 0E46                          l2160 0D8A                          l2152 0D44  
                        l2144 0D20                          l2136 0CFE                          l2128 0CD8  
                        l1274 1614                          l2090 1694                          l2082 1312  
                        l2074 12F4                          l2066 12C2                          l2058 1298  
                        l1194 0B82                          l1186 0B5C                          l1178 0B22  
                        l1098 08DA                          l1258 16DC                          l2314 10A8  
                        l1354 137E                          l1346 1326                          l2170 0DB0  
                        l2162 0D8E                          l2154 0D64                          l2146 0D32  
                        l2138 0D02                          l2226 0E68                          l1276 161E  
                        l2092 1698                          l2084 131A                          l2076 12F6  
                        l2068 12D0                          l1196 0BAC                          l1188 0B6A  
                        l2316 143C                          l1348 132A                          l2180 0DDA  
                        l2172 0DB6                          l2164 0D92                          l2156 0D6C  
                        l2148 0D36                          l1278 1620                          l2094 169C  
                        l2078 12FC                          l1198 0BBA                          l1358 139A  
                        l2190 0E04                          l2182 0DDE                          l2174 0DC8  
                        l2166 0DA4                          l2158 0D78                          l2096 16A0  
                        l2088 1690                          l2192 0E0C                          l2176 0DCC  
                        l2184 0DE2                          l2168 0DA8                          l2280 1558  
                        l2098 16A4                          l2194 0E10                          l2186 0DF4  
                        l2178 0DD2                          l2282 1564                          l2196 0E18  
                        l2188 0DF8                          l2284 156E                          l1830 15E8  
                        l1910 148E                          l1902 1474                          l2198 0E1E  
                        l2286 1586                          l2278 1554                          l1832 15F0  
                        l1920 14BC                          l1912 1490                          l1904 147C  
                        l1840 13E8                          l2288 158A                          l1834 1600  
                        l1922 14C6                          l1914 1496                          l1906 147E  
                        l1842 13F2                          l1850 1456                          l1930 0EB4  
                        l1828 15D8                          l1924 14D0                          l1916 14A4  
                        l1908 1480                          l1860 1754                          l1844 1406  
                        l1836 13D6                          l1940 0F00                          l1932 0EB8  
                        l1926 14DA                          l1918 14AE                          l1870 1504  
                        l1846 141E                          l1838 13DA                          l1950 0F30  
                        l1942 0F06                          l1934 0EBE                          l1928 14E4  
                        l1856 1746                          l1880 1534                          l1872 1518  
                        l1864 14F2                          l1848 1452                          l1960 0F80  
                        l1952 0F38                          l1944 0F10                          l1936 0EC2  
                        l1858 174C                          l1882 153E                          l1874 151A  
                        l1866 14FE                          l1890 173A                          l1962 0F86  
                        l1954 0F3E                          l1946 0F16                          l1938 0EF6  
                        l1892 16E4                          l1884 1548                          l1876 151E  
                        l1868 1500                          l1980 0FF4                          l1972 0FAC  
                        l1964 0F90                          l1956 0F42                          l1948 0F28  
                        l1894 16E6                          l1878 152E                          l1886 17AA  
                        l1982 0FFA                          l1974 0FB2                          l1966 0F96  
                        l1958 0F76                          l1896 16F2                          l1888 172E  
                        l1992 1020                          l1984 1004                          l1976 0FB6  
                        l1898 16F4                          l1994 1026                          l1986 100A  
                        l1978 0FEA                          l1996 102A                          l1998 105E  
                        STR_1 0801                          STR_2 0822                          STR_3 08BB  
                        STR_4 0861                          STR_5 0880                          STR_6 089F  
                        STR_7 0842                          u1000 0FA8                          u1001 0FA4  
                        u1010 0FC6                          u1011 0FC0                          u1100 12D0  
                        u1020 0FC8                          u1101 12CC                          u1110 12EC  
                        u1030 101C                          u1111 12E8                          u1031 1018  
                        u1120 1312                          u1040 103A                          u1200 0D8A  
                        u1121 130E                          u1041 1034                          u1201 0D86  
                        u1050 103C                          u1210 0DA4                          u1130 0C7C  
                        u1211 0DA0                          u1131 0C78                          u1060 1090  
                        u1220 0DC8                          u1140 0C96                          u1061 108C  
                        u1221 0DC4                          u1141 0C92                          u1070 1272  
                        u1230 0DF4                          u1150 0CBA                          u1071 126E  
                        u1231 0DF0                          u1151 0CB6                          u1080 128C  
                        u1240 0E30                          u1160 0CD8                          u1081 1288  
                        u1241 0E2C                          u1161 0CD4                          u1090 12B2  
                        u1250 0E5C                          u1170 0CF6                          u1091 12AE  
                        u1251 0E58                          u1171 0CF2                          u1180 0D14  
                        u1181 0D10                          u1317 1578                          u1190 0D32  
                        u1327 13F8                          u1191 0D2E                          u1337 1486  
                        u1347 149C                          u1357 14B4                          u1367 1602  
                        _TMR0 000FD6                ??_lcd_display3 001E                  __CFG_PWRT$ON 000000  
                        _flag 0170                          _main 1554                          _isrH 0008  
                        _init 1690                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0040                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
               __CFG_PLLDIV$1 000000                __CFG_CCP2MX$ON 000000                         ?_main 0019  
                       ?_isrH 0019                         ?_init 0019               __end_of___awdiv 1324  
                       _T0CON 000FD5               ___awdiv@divisor 0021                   maqTeste@val 0024  
                       i2l206 16C8                         i2l361 115C                         i2l345 1772  
                       i2l371 11F2                         i2l365 118E                         i2l357 113E  
                       i2l374 125E                         i2l358 1156                         i2l368 11C0  
             ___awdiv@counter 0023         ??_init_matrixKeyboard 001B                         _PORTD 000F83  
     __end_of_lcd_writeNibble 179C                 __CFG_USBDIV$1 000000                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _duty1 000D                         _duty2 0009  
                       _duty3 0005                         _duty4 0001                         _tela0 172E  
                       _tela1 1716                         _tela2 1672                         _tela4 179C  
                       _tecla 0037                __pbitbssCOMRAM 0170                         tablat 000FF5  
                       ttemp5 0041                         ttemp6 0044                         ttemp7 0048  
                       status 000FD8                         wtemp8 0041         __size_of_deadTime_isr 001C  
                lcd_write4@ch 001D                  lcd_string@ch 001E                isr_Timer0@cont 0014  
              __CFG_ICPRT$OFF 000000         __end_of_selecaoServos 13D6             lcd_writeNibble@ch 001B  
              __CFG_PBADEN$ON 000000               __initialization 1596                  __end_of_main 1596  
                __end_of_isrH 1776                  __end_of_init 16AE                        ??_main 002C  
                      ??_isrH 001B                        ??_init 001F                 __activetblptr 000002  
              lcd_display3@un 003D                lcd_display5@un 0038                  _deadTime_isr 16AE  
                      _ADCON1 000FC1                        ?_tela0 0019                        ?_tela1 0019  
                      ?_tela2 0019                        ?_tela4 0019                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 001F              __end_of_adc_init 1636  
            __end_of_adc_read 175E                        i2l1340 16BC                        i2l1342 16C2  
                      i2l1344 16C6                        i2l1338 16AE                        i2l1700 1188  
                      i2l2318 1238                        i2l1710 11DC                        i2l1702 119C  
                      i2l1712 11EC                        i2l1704 11AA                        i2l1714 1200  
                      i2l1706 11BA                        i2l1722 1224                        i2l1716 120E  
                      i2l1708 11CE                        i2l1718 121E                        i2l1670 10D6  
                      i2l1680 1108                        i2l1672 10DC                        i2l1690 113A  
                      i2l1682 111A                        i2l1674 10EE                        i2l1666 10D0  
                      i2l1692 1142                        i2l1684 111E                        i2l1676 10F2  
                      i2l1668 10D2                        i2l1694 1150                        i2l1686 1130  
                      i2l1678 1104                        i2l1696 116A                        i2l1688 1134  
                      i2l1792 1760                        i2l1698 1178                        i2l1794 176E  
                      _INTCON 000FF2                __CFG_XINST$OFF 000000        __size_of_keyboardScan2 0386  
      __size_of_keyboardScan3 001A              __end_of_maqTeste 10D0                        _adcval 0035  
                   ??___awdiv 0023                __CFG_STVREN$ON 000000                 maqEstados@adc 0029  
               maqEstados@val 002B                        _flamis 0031                        _isr_AD 16E4  
                      _estado 0015              __end_of_init_lcd 14F0                        _tela31 1654  
                      _tela32 1636                        clear_0 15C2              ___awdiv@quotient 0025  
                      _retsak 0016          __end_of_lcd_display3 1554                  __pdataCOMRAM 0001  
            __end_of_set_duty 17B4              ?_lcd_writeNibble 0019                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
             isr_Timer0@cont2 0013                 lcd_write4@_rs 001C                    __accesstop 0060  
     __end_of__initialization 15C8                 ___rparam_used 000001                __pcstackCOMRAM 0019  
               __end_of_tela0 1746                 __end_of_tela1 172E                 __end_of_tela2 1690  
               __end_of_tela4 17AA                 _keyboardScan2 08D6                 _keyboardScan3 16CA  
                     ??_tela0 0022                       ??_tela1 0022                       ??_tela2 0022  
                     ??_tela4 0022                  _flagDeadTime 0171                adc_read@result 0033  
           lcd_display5@unmil 003B               lcd_display3@dez 003E               lcd_display5@dez 0039  
             lcd_display3@val 001E                       ?_isr_AD 001D                       ?_tela31 0019  
                     ?_tela32 0019                     ?_adc_init 0019                     ?_adc_read 001B  
              ?_keyboardScan2 0019                ?_keyboardScan3 0019                       i2u42_40 16BC  
                     i2u42_41 16B8                       i2u80_40 119C                       i2u80_41 1198  
                     i2u81_40 11CE                       i2u81_41 11CA                       i2u82_40 1200  
                     i2u74_40 10EE                       i2u90_40 176E                       i2u82_41 11FC  
                     i2u74_41 10EA                       i2u90_41 176A                       i2u75_40 1104  
                     i2u75_41 1100                       i2u76_40 111A                       i2u76_41 1116  
                     i2u77_40 1130                       i2u77_41 112C                       i2u78_40 1150  
                     i2u78_41 114C                       i2u79_40 116A                       i2u79_41 1166  
                  _maqEstados 0C5C                    _lcd_write4 15D6                    _lcd_string 13D6  
                   ?_maqTeste 0019               __CFG_VREGEN$OFF 000000                     ?_init_lcd 0019  
                     __Hparam 0000                       __Lparam 0000                     ?_set_duty 001B  
       __size_of_lcd_display3 0064                       ___awdiv 1260   __end_of_init_matrixKeyboard 178C  
                __psmallconst 0800                       _btal1c1 0181                       _btal1c2 0180  
                     _btal1c3 017F                       _btal1c4 017E                       _btal2c1 017D  
                     _btal2c2 017C                       _btal2c3 017B                       _btal2c4 017A  
             __size_of_isr_AD 001A                       _btal3c1 0179                       _btal3c2 0178  
                     _btal3c3 0177                       _btal3c4 0176                       __pcinit 1596  
                     _btal4c1 0175                       _btal4c2 0174                       _btal4c3 0173  
                     _btal4c4 0172               __size_of_tela31 001E               __size_of_tela32 001E  
                     __ramtop 0800                    ??_adc_init 001B                    ??_adc_read 001D  
                     __ptext0 1554                       __ptext1 0C5C                       __ptext2 179C  
                     __ptext3 1636                       __ptext4 1654                       __ptext5 1672  
                     __ptext6 1716                       __ptext7 1324                       __ptext8 0EB4  
                     __ptext9 172E                    _isr_Timer0 10D0                       _selecao 0017  
                _contDeadTime 0018                   set_duty@val 001B                __pintcode_body 175E  
        end_of_initialization 15C8                    ??_maqTeste 0022                 __Lmediumconst 0000  
                  ??_init_lcd 001E                       int_func 175E                  _lcd_display3 14F0  
                  ??_set_duty 001D                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                     _PORTAbits 000F80  
                   _PORTBbits 000F81                     _PORTDbits 000F83                     _PORTEbits 000F84  
             ??_keyboardScan2 001B               ??_keyboardScan3 001C        __size_of_selecaoServos 00B2  
                   _TRISBbits 000F93                     _TRISDbits 000F95                   ?_maqEstados 0019  
                 ?_lcd_write4 001C                   ?_lcd_string 001E                 __pidataCOMRAM 16FE  
              __end_of_isr_AD 16FE                __end_of_tela31 1672                __end_of_tela32 1654  
                 ?_isr_Timer0 0019           start_initialization 1596      __size_of_lcd_writeNibble 0010  
               _selecaoServos 1324           __size_of_maqEstados 0258           __size_of_lcd_write4 0034  
         __size_of_lcd_string 009E              __CFG_LPT1OSC$OFF 000000                      ??_isr_AD 001F  
                    ??_tela31 0022                      ??_tela32 0022             __size_of_adc_init 002C  
           __size_of_adc_read 0018                   __pbssCOMRAM 0031            lcd_display5@dezmil 003C  
           __size_of_maqTeste 021C                ?_selecaoServos 0019              lcd_display3@cent 003F  
            lcd_display5@cent 003A           __size_of_isr_Timer0 0190             __size_of_init_lcd 007C  
                   __pintcode 0008                      ?___awdiv 001F             __size_of_set_duty 000A  
                 __smallconst 0800                 ?_deadTime_isr 0019                __size_of_tela0 0018  
              __size_of_tela1 0018                __size_of_tela2 001E                __size_of_tela4 000E  
           ??_lcd_writeNibble 001B                      _PIR1bits 000F9E              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
__size_of_init_matrixKeyboard 0016                ??_deadTime_isr 0019                  ??_maqEstados 0027  
                ??_lcd_write4 001D                  ??_lcd_string 0020                   _INTCON2bits 000FF1  
                   copy_data0 15AA               ??_selecaoServos 001B                      __Hrparam 0000  
                    __Lrparam 0000              __size_of___awdiv 00C4            __end_of_maqEstados 0EB4  
          __end_of_lcd_write4 160A            __end_of_lcd_string 1474                      _adc_init 160A  
                    _adc_read 1746                  ??_isr_Timer0 0019         __end_of_keyboardScan2 0C5C  
       __end_of_keyboardScan3 16E4                      __ptext10 13D6                      __ptext11 17AA  
                    __ptext20 1474                      __ptext12 14F0                      __ptext21 15D6  
                    __ptext13 16CA                      __ptext22 178C                      __ptext14 08D6  
                    __ptext23 160A                      __ptext15 16E4                      __ptext16 1746  
                    __ptext25 10D0                      __ptext17 1260                      __ptext26 16AE  
                    __ptext18 1690                      __ptext19 1776                      _maqTeste 0EB4  
                    _init_lcd 1474                 __size_of_main 0042                 __size_of_isrH 176E  
               __size_of_init 001E            __end_of_isr_Timer0 1260                      _set_duty 17AA  
                    int$flags 0040         __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2  
                    intlevel2 0000                selecaoServos@p 001D          __end_of_deadTime_isr 16CA  
             _lcd_writeNibble 178C                 ?_lcd_display3 0019           _init_matrixKeyboard 1776  
